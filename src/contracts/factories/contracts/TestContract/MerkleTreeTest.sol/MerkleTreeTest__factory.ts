/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../../common";
import type {
  MerkleTreeTest,
  MerkleTreeTestInterface,
} from "../../../../contracts/TestContract/MerkleTreeTest.sol/MerkleTreeTest";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_airdropClaim",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_who",
        type: "address",
      },
    ],
    name: "AlreadyClaimed",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_who",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amnt",
        type: "uint256",
      },
    ],
    name: "NotInMerkle",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "who",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "ClaimSet",
    type: "event",
  },
  {
    inputs: [],
    name: "_init",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "airdropClaim",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "bytes32[]",
        name: "proof",
        type: "bytes32[]",
      },
    ],
    name: "claim",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "hasClaimed",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "info",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "info2",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "init",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "isFnftOwner",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "merkleRoot",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "ownersToFnft",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "owners",
        type: "address[]",
      },
      {
        internalType: "address[]",
        name: "smartWallet",
        type: "address[]",
      },
    ],
    name: "setFNFTOwners",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_merkleRoot",
        type: "bytes32",
      },
    ],
    name: "setMerkleRoot",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_owner",
        type: "address",
      },
    ],
    name: "setOwner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "swFnftToOwner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60c0604052601c60808190527f4d65726b6c65547265652065636f73797374656d2041697264726f700000000060a0908152620000409160079190620000e7565b506040805180820190915260178082527f4d65726b6c655472656520544553542041697264726f7000000000000000000060209092019182526200008791600891620000e7565b503480156200009557600080fd5b5060405162000dd838038062000dd8833981016040819052620000b8916200018d565b600180546001600160a01b039092166001600160a01b03199283161790556002805490911633179055620001fb565b828054620000f590620001bf565b90600052602060002090601f01602090048101928262000119576000855562000164565b82601f106200013457805160ff191683800117855562000164565b8280016001018555821562000164579182015b828111156200016457825182559160200191906001019062000147565b506200017292915062000176565b5090565b5b8082111562000172576000815560010162000177565b600060208284031215620001a057600080fd5b81516001600160a01b0381168114620001b857600080fd5b9392505050565b600181811c90821680620001d457607f821691505b602082108103620001f557634e487b7160e01b600052602260045260246000fd5b50919050565b610bcd806200020b6000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c806373b2e80e11610097578063b6d6ed4e11610066578063b6d6ed4e14610210578063d273490514610223578063e1c7392a1461024c578063e8071ef71461026057600080fd5b806373b2e80e146101af5780637cb64759146101e25780638da5cb5b146101f5578063b349b9731461020857600080fd5b8063370158ea116100d3578063370158ea1461016c5780633d13f874146101815780634f813c89146101945780636b7f18bb146101a757600080fd5b80630bcda918146100fa57806313af4035146101405780632eb4a7ab14610155575b600080fd5b6101236101083660046108ac565b6005602052600090815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61015361014e3660046108ac565b610283565b005b61015e60005481565b604051908152602001610137565b6101746102eb565b60405161013791906108c7565b61015361018f36600461091c565b610379565b6101536101a2366004610a5e565b6105d7565b6101746106fb565b6101d26101bd3660046108ac565b60036020526000908152604090205460ff1681565b6040519015158152602001610137565b6101536101f0366004610ac2565b610708565b600254610123906001600160a01b031681565b61015361076d565b600154610123906001600160a01b031681565b6101236102313660046108ac565b6004602052600090815260409020546001600160a01b031681565b6002546101d290600160a01b900460ff1681565b6101d261026e3660046108ac565b60066020526000908152604090205460ff1681565b6002546001600160a01b031633146102b65760405162461bcd60e51b81526004016102ad90610adb565b60405180910390fd5b6001600160a01b0381166102c957600080fd5b600280546001600160a01b0319166001600160a01b0392909216919091179055565b600780546102f890610afe565b80601f016020809104026020016040519081016040528092919081815260200182805461032490610afe565b80156103715780601f1061034657610100808354040283529160200191610371565b820191906000526020600020905b81548152906001019060200180831161035457829003601f168201915b505050505081565b600254600160a01b900460ff166103c05760405162461bcd60e51b815260206004820152600b60248201526a1b9bdd081cdd185c9d195960aa1b60448201526064016102ad565b3360008181526006602052604090205460ff16156103f35750336000908152600560205260409020546001600160a01b03165b3360009081526003602052604090205460ff161561042f57604051632058b6db60e01b81526001600160a01b03821660048201526024016102ad565b6040516bffffffffffffffffffffffff19606083901b1660208201526034810185905260009060540160405160208183030381529060405280519060200120905060006104b185858080602002602001604051908101604052809392919081815260200183836020028082843760009201829052505492508691506107fb9050565b9050806104e35760405163057365dd60e31b81526001600160a01b0384166004820152602481018790526044016102ad565b60015460405163d5a703b560e01b81523360048201526001600160a01b03898116602483015260448201899052600092169063d5a703b5906064016020604051808303816000875af115801561053d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105619190610b38565b90508061056d57600080fd5b3360008181526003602052604090819020805460ff19166001179055516001600160a01b038a1691907fdc2005f113f1c2ccd6bd35df2a16954f0ff4e029277b9d76ea10b0b3b29ae964906105c5908b815260200190565b60405180910390a35050505050505050565b6002546001600160a01b031633146106015760405162461bcd60e51b81526004016102ad90610adb565b805182511461060f57600080fd5b815160009081805b828410156106f35784848151811061063157610631610b5a565b6020026020010151905085848151811061064d5761064d610b5a565b6020026020010151915060006001600160a01b0316826001600160a01b03160361067657600080fd5b6001600160a01b03811661068957600080fd5b6001600160a01b03808216600081815260046020908152604080832080549588166001600160a01b03199687168117909155835260058252808320805490951690931790935560069092529020805460ff19166001179055836106eb81610b70565b945050610617565b505050505050565b600880546102f890610afe565b6002546001600160a01b031633146107325760405162461bcd60e51b81526004016102ad90610adb565b806107685760405162461bcd60e51b81526020600482015260066024820152650726f6f7420360d41b60448201526064016102ad565b600055565b6002546001600160a01b031633146107975760405162461bcd60e51b81526004016102ad90610adb565b600254600160a01b900460ff16156107ae57600080fd5b6000546107e65760405162461bcd60e51b81526020600482015260066024820152650726f6f7420360d41b60448201526064016102ad565b6002805460ff60a01b1916600160a01b179055565b6000826108088584610811565b14949350505050565b600081815b8451811015610856576108428286838151811061083557610835610b5a565b602002602001015161085e565b91508061084e81610b70565b915050610816565b509392505050565b600081831061087a576000828152602084905260409020610889565b60008381526020839052604090205b9392505050565b80356001600160a01b03811681146108a757600080fd5b919050565b6000602082840312156108be57600080fd5b61088982610890565b600060208083528351808285015260005b818110156108f4578581018301518582016040015282016108d8565b81811115610906576000604083870101525b50601f01601f1916929092016040019392505050565b6000806000806060858703121561093257600080fd5b61093b85610890565b935060208501359250604085013567ffffffffffffffff8082111561095f57600080fd5b818701915087601f83011261097357600080fd5b81358181111561098257600080fd5b8860208260051b850101111561099757600080fd5b95989497505060200194505050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126109cd57600080fd5b8135602067ffffffffffffffff808311156109ea576109ea6109a6565b8260051b604051601f19603f83011681018181108482111715610a0f57610a0f6109a6565b604052938452858101830193838101925087851115610a2d57600080fd5b83870191505b84821015610a5357610a4482610890565b83529183019190830190610a33565b979650505050505050565b60008060408385031215610a7157600080fd5b823567ffffffffffffffff80821115610a8957600080fd5b610a95868387016109bc565b93506020850135915080821115610aab57600080fd5b50610ab8858286016109bc565b9150509250929050565b600060208284031215610ad457600080fd5b5035919050565b6020808252600990820152683737ba1037bbb732b960b91b604082015260600190565b600181811c90821680610b1257607f821691505b602082108103610b3257634e487b7160e01b600052602260045260246000fd5b50919050565b600060208284031215610b4a57600080fd5b8151801515811461088957600080fd5b634e487b7160e01b600052603260045260246000fd5b600060018201610b9057634e487b7160e01b600052601160045260246000fd5b506001019056fea2646970667358221220b51b74f1edb9eff3a6892d6e09c74e8a40626f6f7e3bbbaccdd27de517b9db1664736f6c634300080d0033";

type MerkleTreeTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MerkleTreeTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MerkleTreeTest__factory extends ContractFactory {
  constructor(...args: MerkleTreeTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _airdropClaim: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(_airdropClaim, overrides || {});
  }
  override deploy(
    _airdropClaim: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(_airdropClaim, overrides || {}) as Promise<
      MerkleTreeTest & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): MerkleTreeTest__factory {
    return super.connect(runner) as MerkleTreeTest__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MerkleTreeTestInterface {
    return new Interface(_abi) as MerkleTreeTestInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): MerkleTreeTest {
    return new Contract(address, _abi, runner) as unknown as MerkleTreeTest;
  }
}
