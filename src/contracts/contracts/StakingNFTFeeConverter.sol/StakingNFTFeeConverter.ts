/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IRouter01 {
  export type RouteStruct = {
    from: AddressLike;
    to: AddressLike;
    stable: boolean;
  };

  export type RouteStructOutput = [
    from: string,
    to: string,
    stable: boolean
  ] & { from: string; to: string; stable: boolean };
}

export interface StakingNFTFeeConverterInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "_pairs"
      | "_tokens"
      | "addToken"
      | "claimFees"
      | "claimSingleFee"
      | "isKeeper"
      | "isToken"
      | "lastRewardtime"
      | "masterchef"
      | "owner"
      | "pairFactory"
      | "pairs"
      | "removeKeeper"
      | "removeToken"
      | "router"
      | "setDistribution"
      | "setKeeper"
      | "setMasterchef"
      | "setPair"
      | "setPairFactory"
      | "setRouter"
      | "setRoutesFor"
      | "swap"
      | "swapManual"
      | "tokenToRoutes"
      | "tokens"
      | "transferOwnership"
      | "wbnb"
      | "withdrawERC20"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ClaimFee"
      | "ClaimFeeError"
      | "StakingReward"
      | "SwapError"
      | "TransferOwnership"
  ): EventFragment;

  encodeFunctionData(functionFragment: "_pairs", values?: undefined): string;
  encodeFunctionData(functionFragment: "_tokens", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addToken",
    values: [AddressLike, IRouter01.RouteStruct]
  ): string;
  encodeFunctionData(functionFragment: "claimFees", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "claimSingleFee",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isKeeper",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lastRewardtime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "masterchef",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pairFactory",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pairs", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "removeKeeper",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "router", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setDistribution",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setKeeper",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setMasterchef",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setPair",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setPairFactory",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setRouter",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setRoutesFor",
    values: [AddressLike, IRouter01.RouteStruct]
  ): string;
  encodeFunctionData(functionFragment: "swap", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "swapManual",
    values: [BigNumberish, BigNumberish, IRouter01.RouteStruct[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenToRoutes",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "wbnb", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawERC20",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "_pairs", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_tokens", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimFees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimSingleFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isKeeper", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastRewardtime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "masterchef", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pairFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pairs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeKeeper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "router", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDistribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setKeeper", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMasterchef",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPair", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPairFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setRouter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setRoutesFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swapManual", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenToRoutes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "wbnb", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawERC20",
    data: BytesLike
  ): Result;
}

export namespace ClaimFeeEvent {
  export type InputTuple = [_pair: AddressLike, timestamp: BigNumberish];
  export type OutputTuple = [_pair: string, timestamp: bigint];
  export interface OutputObject {
    _pair: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClaimFeeErrorEvent {
  export type InputTuple = [_pair: AddressLike, timestamp: BigNumberish];
  export type OutputTuple = [_pair: string, timestamp: bigint];
  export interface OutputObject {
    _pair: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StakingRewardEvent {
  export type InputTuple = [
    _timestamp: BigNumberish,
    _wbnbAmount: BigNumberish
  ];
  export type OutputTuple = [_timestamp: bigint, _wbnbAmount: bigint];
  export interface OutputObject {
    _timestamp: bigint;
    _wbnbAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SwapErrorEvent {
  export type InputTuple = [
    _tokenIn: AddressLike,
    _balanceIn: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    _tokenIn: string,
    _balanceIn: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    _tokenIn: string;
    _balanceIn: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferOwnershipEvent {
  export type InputTuple = [oldOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [oldOwner: string, newOwner: string];
  export interface OutputObject {
    oldOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface StakingNFTFeeConverter extends BaseContract {
  connect(runner?: ContractRunner | null): StakingNFTFeeConverter;
  waitForDeployment(): Promise<this>;

  interface: StakingNFTFeeConverterInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  _pairs: TypedContractMethod<[], [string[]], "view">;

  _tokens: TypedContractMethod<[], [string[]], "view">;

  addToken: TypedContractMethod<
    [token: AddressLike, routes: IRouter01.RouteStruct],
    [void],
    "nonpayable"
  >;

  claimFees: TypedContractMethod<[], [void], "nonpayable">;

  claimSingleFee: TypedContractMethod<
    [_pair: AddressLike],
    [void],
    "nonpayable"
  >;

  isKeeper: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  isToken: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  lastRewardtime: TypedContractMethod<[], [bigint], "view">;

  masterchef: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  pairFactory: TypedContractMethod<[], [string], "view">;

  pairs: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  removeKeeper: TypedContractMethod<
    [_keeper: AddressLike],
    [void],
    "nonpayable"
  >;

  removeToken: TypedContractMethod<[token: AddressLike], [void], "nonpayable">;

  router: TypedContractMethod<[], [string], "view">;

  setDistribution: TypedContractMethod<[], [void], "nonpayable">;

  setKeeper: TypedContractMethod<[_keeper: AddressLike], [void], "nonpayable">;

  setMasterchef: TypedContractMethod<
    [_masterchef: AddressLike],
    [void],
    "nonpayable"
  >;

  setPair: TypedContractMethod<[__pairs: AddressLike[]], [void], "nonpayable">;

  setPairFactory: TypedContractMethod<
    [_pairFactory: AddressLike],
    [void],
    "nonpayable"
  >;

  setRouter: TypedContractMethod<[_router: AddressLike], [void], "nonpayable">;

  setRoutesFor: TypedContractMethod<
    [token: AddressLike, routes: IRouter01.RouteStruct],
    [void],
    "nonpayable"
  >;

  swap: TypedContractMethod<[], [void], "nonpayable">;

  swapManual: TypedContractMethod<
    [
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      _routes: IRouter01.RouteStruct[],
      deadline: BigNumberish
    ],
    [bigint[]],
    "nonpayable"
  >;

  tokenToRoutes: TypedContractMethod<
    [arg0: AddressLike],
    [[string, string, boolean] & { from: string; to: string; stable: boolean }],
    "view"
  >;

  tokens: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  wbnb: TypedContractMethod<[], [string], "view">;

  withdrawERC20: TypedContractMethod<
    [_token: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "_pairs"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "_tokens"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "addToken"
  ): TypedContractMethod<
    [token: AddressLike, routes: IRouter01.RouteStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claimFees"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "claimSingleFee"
  ): TypedContractMethod<[_pair: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "isKeeper"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isToken"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "lastRewardtime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "masterchef"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pairFactory"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pairs"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "removeKeeper"
  ): TypedContractMethod<[_keeper: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "removeToken"
  ): TypedContractMethod<[token: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "router"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setDistribution"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setKeeper"
  ): TypedContractMethod<[_keeper: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMasterchef"
  ): TypedContractMethod<[_masterchef: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPair"
  ): TypedContractMethod<[__pairs: AddressLike[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPairFactory"
  ): TypedContractMethod<[_pairFactory: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setRouter"
  ): TypedContractMethod<[_router: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setRoutesFor"
  ): TypedContractMethod<
    [token: AddressLike, routes: IRouter01.RouteStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "swap"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "swapManual"
  ): TypedContractMethod<
    [
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      _routes: IRouter01.RouteStruct[],
      deadline: BigNumberish
    ],
    [bigint[]],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "tokenToRoutes"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [[string, string, boolean] & { from: string; to: string; stable: boolean }],
    "view"
  >;
  getFunction(
    nameOrSignature: "tokens"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "wbnb"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "withdrawERC20"
  ): TypedContractMethod<[_token: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "ClaimFee"
  ): TypedContractEvent<
    ClaimFeeEvent.InputTuple,
    ClaimFeeEvent.OutputTuple,
    ClaimFeeEvent.OutputObject
  >;
  getEvent(
    key: "ClaimFeeError"
  ): TypedContractEvent<
    ClaimFeeErrorEvent.InputTuple,
    ClaimFeeErrorEvent.OutputTuple,
    ClaimFeeErrorEvent.OutputObject
  >;
  getEvent(
    key: "StakingReward"
  ): TypedContractEvent<
    StakingRewardEvent.InputTuple,
    StakingRewardEvent.OutputTuple,
    StakingRewardEvent.OutputObject
  >;
  getEvent(
    key: "SwapError"
  ): TypedContractEvent<
    SwapErrorEvent.InputTuple,
    SwapErrorEvent.OutputTuple,
    SwapErrorEvent.OutputObject
  >;
  getEvent(
    key: "TransferOwnership"
  ): TypedContractEvent<
    TransferOwnershipEvent.InputTuple,
    TransferOwnershipEvent.OutputTuple,
    TransferOwnershipEvent.OutputObject
  >;

  filters: {
    "ClaimFee(address,uint256)": TypedContractEvent<
      ClaimFeeEvent.InputTuple,
      ClaimFeeEvent.OutputTuple,
      ClaimFeeEvent.OutputObject
    >;
    ClaimFee: TypedContractEvent<
      ClaimFeeEvent.InputTuple,
      ClaimFeeEvent.OutputTuple,
      ClaimFeeEvent.OutputObject
    >;

    "ClaimFeeError(address,uint256)": TypedContractEvent<
      ClaimFeeErrorEvent.InputTuple,
      ClaimFeeErrorEvent.OutputTuple,
      ClaimFeeErrorEvent.OutputObject
    >;
    ClaimFeeError: TypedContractEvent<
      ClaimFeeErrorEvent.InputTuple,
      ClaimFeeErrorEvent.OutputTuple,
      ClaimFeeErrorEvent.OutputObject
    >;

    "StakingReward(uint256,uint256)": TypedContractEvent<
      StakingRewardEvent.InputTuple,
      StakingRewardEvent.OutputTuple,
      StakingRewardEvent.OutputObject
    >;
    StakingReward: TypedContractEvent<
      StakingRewardEvent.InputTuple,
      StakingRewardEvent.OutputTuple,
      StakingRewardEvent.OutputObject
    >;

    "SwapError(address,uint256,uint256)": TypedContractEvent<
      SwapErrorEvent.InputTuple,
      SwapErrorEvent.OutputTuple,
      SwapErrorEvent.OutputObject
    >;
    SwapError: TypedContractEvent<
      SwapErrorEvent.InputTuple,
      SwapErrorEvent.OutputTuple,
      SwapErrorEvent.OutputObject
    >;

    "TransferOwnership(address,address)": TypedContractEvent<
      TransferOwnershipEvent.InputTuple,
      TransferOwnershipEvent.OutputTuple,
      TransferOwnershipEvent.OutputObject
    >;
    TransferOwnership: TypedContractEvent<
      TransferOwnershipEvent.InputTuple,
      TransferOwnershipEvent.OutputTuple,
      TransferOwnershipEvent.OutputObject
    >;
  };
}
