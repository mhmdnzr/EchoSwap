/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface PairFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "MAX_FEE"
      | "MAX_REFERRAL_FEE"
      | "acceptFeeManager"
      | "acceptPauser"
      | "allPairs"
      | "allPairsLength"
      | "createPair"
      | "dibs"
      | "feeManager"
      | "getFee"
      | "getInitializable"
      | "getPair"
      | "isPair"
      | "isPaused"
      | "pairCodeHash"
      | "pairs"
      | "pauser"
      | "pendingFeeManager"
      | "pendingPauser"
      | "setDibs"
      | "setFee"
      | "setFeeManager"
      | "setPause"
      | "setPauser"
      | "setReferralFee"
      | "setStakingFeeAddress"
      | "setStakingFees"
      | "stableFee"
      | "stakingFeeHandler"
      | "stakingNFTFee"
      | "volatileFee"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "PairCreated"): EventFragment;

  encodeFunctionData(functionFragment: "MAX_FEE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "MAX_REFERRAL_FEE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptFeeManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptPauser",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allPairs",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allPairsLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createPair",
    values: [AddressLike, AddressLike, boolean]
  ): string;
  encodeFunctionData(functionFragment: "dibs", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "feeManager",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getFee", values: [boolean]): string;
  encodeFunctionData(
    functionFragment: "getInitializable",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPair",
    values: [AddressLike, AddressLike, boolean]
  ): string;
  encodeFunctionData(functionFragment: "isPair", values: [AddressLike]): string;
  encodeFunctionData(functionFragment: "isPaused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pairCodeHash",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pairs", values?: undefined): string;
  encodeFunctionData(functionFragment: "pauser", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingFeeManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pendingPauser",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setDibs",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setFee",
    values: [boolean, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeManager",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "setPause", values: [boolean]): string;
  encodeFunctionData(
    functionFragment: "setPauser",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setReferralFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setStakingFeeAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setStakingFees",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "stableFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "stakingFeeHandler",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stakingNFTFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "volatileFee",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "MAX_FEE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MAX_REFERRAL_FEE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptFeeManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptPauser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allPairs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allPairsLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createPair", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "dibs", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feeManager", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getInitializable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPair", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isPair", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isPaused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pairCodeHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pairs", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pauser", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingFeeManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingPauser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setDibs", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFeeManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setPauser", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setReferralFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStakingFeeAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStakingFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stableFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakingFeeHandler",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakingNFTFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "volatileFee",
    data: BytesLike
  ): Result;
}

export namespace PairCreatedEvent {
  export type InputTuple = [
    token0: AddressLike,
    token1: AddressLike,
    stable: boolean,
    pair: AddressLike,
    arg4: BigNumberish
  ];
  export type OutputTuple = [
    token0: string,
    token1: string,
    stable: boolean,
    pair: string,
    arg4: bigint
  ];
  export interface OutputObject {
    token0: string;
    token1: string;
    stable: boolean;
    pair: string;
    arg4: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PairFactory extends BaseContract {
  connect(runner?: ContractRunner | null): PairFactory;
  waitForDeployment(): Promise<this>;

  interface: PairFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MAX_FEE: TypedContractMethod<[], [bigint], "view">;

  MAX_REFERRAL_FEE: TypedContractMethod<[], [bigint], "view">;

  acceptFeeManager: TypedContractMethod<[], [void], "nonpayable">;

  acceptPauser: TypedContractMethod<[], [void], "nonpayable">;

  allPairs: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  allPairsLength: TypedContractMethod<[], [bigint], "view">;

  createPair: TypedContractMethod<
    [tokenA: AddressLike, tokenB: AddressLike, stable: boolean],
    [string],
    "nonpayable"
  >;

  dibs: TypedContractMethod<[], [string], "view">;

  feeManager: TypedContractMethod<[], [string], "view">;

  getFee: TypedContractMethod<[_stable: boolean], [bigint], "view">;

  getInitializable: TypedContractMethod<
    [],
    [[string, string, boolean]],
    "view"
  >;

  getPair: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: boolean],
    [string],
    "view"
  >;

  isPair: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  isPaused: TypedContractMethod<[], [boolean], "view">;

  pairCodeHash: TypedContractMethod<[], [string], "view">;

  pairs: TypedContractMethod<[], [string[]], "view">;

  pauser: TypedContractMethod<[], [string], "view">;

  pendingFeeManager: TypedContractMethod<[], [string], "view">;

  pendingPauser: TypedContractMethod<[], [string], "view">;

  setDibs: TypedContractMethod<[_dibs: AddressLike], [void], "nonpayable">;

  setFee: TypedContractMethod<
    [_stable: boolean, _fee: BigNumberish],
    [void],
    "nonpayable"
  >;

  setFeeManager: TypedContractMethod<
    [_feeManager: AddressLike],
    [void],
    "nonpayable"
  >;

  setPause: TypedContractMethod<[_state: boolean], [void], "nonpayable">;

  setPauser: TypedContractMethod<[_pauser: AddressLike], [void], "nonpayable">;

  setReferralFee: TypedContractMethod<
    [_refFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  setStakingFeeAddress: TypedContractMethod<
    [_feehandler: AddressLike],
    [void],
    "nonpayable"
  >;

  setStakingFees: TypedContractMethod<
    [_newFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  stableFee: TypedContractMethod<[], [bigint], "view">;

  stakingFeeHandler: TypedContractMethod<[], [string], "view">;

  stakingNFTFee: TypedContractMethod<[], [bigint], "view">;

  volatileFee: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MAX_FEE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_REFERRAL_FEE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "acceptFeeManager"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "acceptPauser"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "allPairs"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "allPairsLength"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "createPair"
  ): TypedContractMethod<
    [tokenA: AddressLike, tokenB: AddressLike, stable: boolean],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "dibs"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "feeManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getFee"
  ): TypedContractMethod<[_stable: boolean], [bigint], "view">;
  getFunction(
    nameOrSignature: "getInitializable"
  ): TypedContractMethod<[], [[string, string, boolean]], "view">;
  getFunction(
    nameOrSignature: "getPair"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: boolean],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "isPair"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isPaused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "pairCodeHash"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pairs"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "pauser"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pendingFeeManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pendingPauser"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setDibs"
  ): TypedContractMethod<[_dibs: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setFee"
  ): TypedContractMethod<
    [_stable: boolean, _fee: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setFeeManager"
  ): TypedContractMethod<[_feeManager: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPause"
  ): TypedContractMethod<[_state: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPauser"
  ): TypedContractMethod<[_pauser: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setReferralFee"
  ): TypedContractMethod<[_refFee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setStakingFeeAddress"
  ): TypedContractMethod<[_feehandler: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setStakingFees"
  ): TypedContractMethod<[_newFee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "stableFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "stakingFeeHandler"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "stakingNFTFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "volatileFee"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "PairCreated"
  ): TypedContractEvent<
    PairCreatedEvent.InputTuple,
    PairCreatedEvent.OutputTuple,
    PairCreatedEvent.OutputObject
  >;

  filters: {
    "PairCreated(address,address,bool,address,uint256)": TypedContractEvent<
      PairCreatedEvent.InputTuple,
      PairCreatedEvent.OutputTuple,
      PairCreatedEvent.OutputObject
    >;
    PairCreated: TypedContractEvent<
      PairCreatedEvent.InputTuple,
      PairCreatedEvent.OutputTuple,
      PairCreatedEvent.OutputObject
    >;
  };
}
