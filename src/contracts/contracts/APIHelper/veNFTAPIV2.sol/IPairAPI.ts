/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace IPairAPI {
  export type PairInfoStruct = {
    pair_address: AddressLike;
    symbol: string;
    name: string;
    decimals: BigNumberish;
    stable: boolean;
    total_supply: BigNumberish;
    token0: AddressLike;
    token0_symbol: string;
    token0_decimals: BigNumberish;
    reserve0: BigNumberish;
    claimable0: BigNumberish;
    token1: AddressLike;
    token1_symbol: string;
    token1_decimals: BigNumberish;
    reserve1: BigNumberish;
    claimable1: BigNumberish;
    gauge: AddressLike;
    gauge_total_supply: BigNumberish;
    fee: AddressLike;
    bribe: AddressLike;
    emissions: BigNumberish;
    emissions_token: AddressLike;
    emissions_token_decimals: BigNumberish;
    account_lp_balance: BigNumberish;
    account_token0_balance: BigNumberish;
    account_token1_balance: BigNumberish;
    account_gauge_balance: BigNumberish;
    account_gauge_earned: BigNumberish;
  };

  export type PairInfoStructOutput = [
    pair_address: string,
    symbol: string,
    name: string,
    decimals: bigint,
    stable: boolean,
    total_supply: bigint,
    token0: string,
    token0_symbol: string,
    token0_decimals: bigint,
    reserve0: bigint,
    claimable0: bigint,
    token1: string,
    token1_symbol: string,
    token1_decimals: bigint,
    reserve1: bigint,
    claimable1: bigint,
    gauge: string,
    gauge_total_supply: bigint,
    fee: string,
    bribe: string,
    emissions: bigint,
    emissions_token: string,
    emissions_token_decimals: bigint,
    account_lp_balance: bigint,
    account_token0_balance: bigint,
    account_token1_balance: bigint,
    account_gauge_balance: bigint,
    account_gauge_earned: bigint
  ] & {
    pair_address: string;
    symbol: string;
    name: string;
    decimals: bigint;
    stable: boolean;
    total_supply: bigint;
    token0: string;
    token0_symbol: string;
    token0_decimals: bigint;
    reserve0: bigint;
    claimable0: bigint;
    token1: string;
    token1_symbol: string;
    token1_decimals: bigint;
    reserve1: bigint;
    claimable1: bigint;
    gauge: string;
    gauge_total_supply: bigint;
    fee: string;
    bribe: string;
    emissions: bigint;
    emissions_token: string;
    emissions_token_decimals: bigint;
    account_lp_balance: bigint;
    account_token0_balance: bigint;
    account_token1_balance: bigint;
    account_gauge_balance: bigint;
    account_gauge_earned: bigint;
  };
}

export interface IPairAPIInterface extends Interface {
  getFunction(nameOrSignature: "getPair" | "pair_factory"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getPair",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "pair_factory",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "getPair", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pair_factory",
    data: BytesLike
  ): Result;
}

export interface IPairAPI extends BaseContract {
  connect(runner?: ContractRunner | null): IPairAPI;
  waitForDeployment(): Promise<this>;

  interface: IPairAPIInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getPair: TypedContractMethod<
    [_pair: AddressLike, _account: AddressLike],
    [IPairAPI.PairInfoStructOutput],
    "view"
  >;

  pair_factory: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getPair"
  ): TypedContractMethod<
    [_pair: AddressLike, _account: AddressLike],
    [IPairAPI.PairInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "pair_factory"
  ): TypedContractMethod<[], [string], "view">;

  filters: {};
}
