/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace VeNFTAPI {
  export type RewardStruct = {
    id: BigNumberish;
    amount: BigNumberish;
    decimals: BigNumberish;
    pair: AddressLike;
    token: AddressLike;
    fee: AddressLike;
    bribe: AddressLike;
    symbol: string;
  };

  export type RewardStructOutput = [
    id: bigint,
    amount: bigint,
    decimals: bigint,
    pair: string,
    token: string,
    fee: string,
    bribe: string,
    symbol: string
  ] & {
    id: bigint;
    amount: bigint;
    decimals: bigint;
    pair: string;
    token: string;
    fee: string;
    bribe: string;
    symbol: string;
  };

  export type AllPairRewardsStruct = { rewards: VeNFTAPI.RewardStruct[] };

  export type AllPairRewardsStructOutput = [
    rewards: VeNFTAPI.RewardStructOutput[]
  ] & { rewards: VeNFTAPI.RewardStructOutput[] };

  export type PairVotesStruct = { pair: AddressLike; weight: BigNumberish };

  export type PairVotesStructOutput = [pair: string, weight: bigint] & {
    pair: string;
    weight: bigint;
  };

  export type VeNFTStruct = {
    decimals: BigNumberish;
    voted: boolean;
    attachments: BigNumberish;
    id: BigNumberish;
    amount: BigNumberish;
    voting_amount: BigNumberish;
    rebase_amount: BigNumberish;
    lockEnd: BigNumberish;
    vote_ts: BigNumberish;
    votes: VeNFTAPI.PairVotesStruct[];
    account: AddressLike;
    token: AddressLike;
    tokenSymbol: string;
    tokenDecimals: BigNumberish;
  };

  export type VeNFTStructOutput = [
    decimals: bigint,
    voted: boolean,
    attachments: bigint,
    id: bigint,
    amount: bigint,
    voting_amount: bigint,
    rebase_amount: bigint,
    lockEnd: bigint,
    vote_ts: bigint,
    votes: VeNFTAPI.PairVotesStructOutput[],
    account: string,
    token: string,
    tokenSymbol: string,
    tokenDecimals: bigint
  ] & {
    decimals: bigint;
    voted: boolean;
    attachments: bigint;
    id: bigint;
    amount: bigint;
    voting_amount: bigint;
    rebase_amount: bigint;
    lockEnd: bigint;
    vote_ts: bigint;
    votes: VeNFTAPI.PairVotesStructOutput[];
    account: string;
    token: string;
    tokenSymbol: string;
    tokenDecimals: bigint;
  };
}

export interface VeNFTAPIInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "MAX_PAIRS"
      | "MAX_RESULTS"
      | "allPairRewards"
      | "getAllNFT"
      | "getNFTFromAddress"
      | "getNFTFromId"
      | "initialize"
      | "notReward"
      | "owner"
      | "pairAPI"
      | "pairFactory"
      | "rewardDisitributor"
      | "setOwner"
      | "setPairAPI"
      | "setPairFactory"
      | "setRewardDistro"
      | "setVoter"
      | "singlePairReward"
      | "underlyingToken"
      | "ve"
      | "voter"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "Initialized" | "Owner"): EventFragment;

  encodeFunctionData(functionFragment: "MAX_PAIRS", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "MAX_RESULTS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allPairRewards",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllNFT",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNFTFromAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getNFTFromId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "notReward",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pairAPI", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pairFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardDisitributor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setOwner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setPairAPI",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setPairFactory",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardDistro",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setVoter",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "singlePairReward",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "underlyingToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "ve", values?: undefined): string;
  encodeFunctionData(functionFragment: "voter", values?: undefined): string;

  decodeFunctionResult(functionFragment: "MAX_PAIRS", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MAX_RESULTS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allPairRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAllNFT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getNFTFromAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNFTFromId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "notReward", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pairAPI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pairFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardDisitributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setPairAPI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPairFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardDistro",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setVoter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "singlePairReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "underlyingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "voter", data: BytesLike): Result;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnerEvent {
  export type InputTuple = [oldOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [oldOwner: string, newOwner: string];
  export interface OutputObject {
    oldOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface VeNFTAPI extends BaseContract {
  connect(runner?: ContractRunner | null): VeNFTAPI;
  waitForDeployment(): Promise<this>;

  interface: VeNFTAPIInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MAX_PAIRS: TypedContractMethod<[], [bigint], "view">;

  MAX_RESULTS: TypedContractMethod<[], [bigint], "view">;

  allPairRewards: TypedContractMethod<
    [_amount: BigNumberish, _offset: BigNumberish, id: BigNumberish],
    [VeNFTAPI.AllPairRewardsStructOutput[]],
    "view"
  >;

  getAllNFT: TypedContractMethod<
    [_amounts: BigNumberish, _offset: BigNumberish],
    [VeNFTAPI.VeNFTStructOutput[]],
    "view"
  >;

  getNFTFromAddress: TypedContractMethod<
    [_user: AddressLike],
    [VeNFTAPI.VeNFTStructOutput[]],
    "view"
  >;

  getNFTFromId: TypedContractMethod<
    [id: BigNumberish],
    [VeNFTAPI.VeNFTStructOutput],
    "view"
  >;

  initialize: TypedContractMethod<
    [
      _voter: AddressLike,
      _rewarddistro: AddressLike,
      _pairApi: AddressLike,
      _pairFactory: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  notReward: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  pairAPI: TypedContractMethod<[], [string], "view">;

  pairFactory: TypedContractMethod<[], [string], "view">;

  rewardDisitributor: TypedContractMethod<[], [string], "view">;

  setOwner: TypedContractMethod<[_owner: AddressLike], [void], "nonpayable">;

  setPairAPI: TypedContractMethod<
    [_pairApi: AddressLike],
    [void],
    "nonpayable"
  >;

  setPairFactory: TypedContractMethod<
    [_pairFactory: AddressLike],
    [void],
    "nonpayable"
  >;

  setRewardDistro: TypedContractMethod<
    [_rewarddistro: AddressLike],
    [void],
    "nonpayable"
  >;

  setVoter: TypedContractMethod<[_voter: AddressLike], [void], "nonpayable">;

  singlePairReward: TypedContractMethod<
    [id: BigNumberish, _pair: AddressLike],
    [VeNFTAPI.RewardStructOutput[]],
    "view"
  >;

  underlyingToken: TypedContractMethod<[], [string], "view">;

  ve: TypedContractMethod<[], [string], "view">;

  voter: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MAX_PAIRS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_RESULTS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "allPairRewards"
  ): TypedContractMethod<
    [_amount: BigNumberish, _offset: BigNumberish, id: BigNumberish],
    [VeNFTAPI.AllPairRewardsStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAllNFT"
  ): TypedContractMethod<
    [_amounts: BigNumberish, _offset: BigNumberish],
    [VeNFTAPI.VeNFTStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getNFTFromAddress"
  ): TypedContractMethod<
    [_user: AddressLike],
    [VeNFTAPI.VeNFTStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getNFTFromId"
  ): TypedContractMethod<
    [id: BigNumberish],
    [VeNFTAPI.VeNFTStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      _voter: AddressLike,
      _rewarddistro: AddressLike,
      _pairApi: AddressLike,
      _pairFactory: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "notReward"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pairAPI"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pairFactory"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "rewardDisitributor"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setOwner"
  ): TypedContractMethod<[_owner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPairAPI"
  ): TypedContractMethod<[_pairApi: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPairFactory"
  ): TypedContractMethod<[_pairFactory: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setRewardDistro"
  ): TypedContractMethod<[_rewarddistro: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setVoter"
  ): TypedContractMethod<[_voter: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "singlePairReward"
  ): TypedContractMethod<
    [id: BigNumberish, _pair: AddressLike],
    [VeNFTAPI.RewardStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "underlyingToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(nameOrSignature: "ve"): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "voter"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "Owner"
  ): TypedContractEvent<
    OwnerEvent.InputTuple,
    OwnerEvent.OutputTuple,
    OwnerEvent.OutputObject
  >;

  filters: {
    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "Owner(address,address)": TypedContractEvent<
      OwnerEvent.InputTuple,
      OwnerEvent.OutputTuple,
      OwnerEvent.OutputObject
    >;
    Owner: TypedContractEvent<
      OwnerEvent.InputTuple,
      OwnerEvent.OutputTuple,
      OwnerEvent.OutputObject
    >;
  };
}
