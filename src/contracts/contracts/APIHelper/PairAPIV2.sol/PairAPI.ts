/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace PairAPI {
  export type PairInfoStruct = {
    pair_address: AddressLike;
    symbol: string;
    name: string;
    decimals: BigNumberish;
    stable: boolean;
    total_supply: BigNumberish;
    token0: AddressLike;
    token0_symbol: string;
    token0_decimals: BigNumberish;
    reserve0: BigNumberish;
    claimable0: BigNumberish;
    token1: AddressLike;
    token1_symbol: string;
    token1_decimals: BigNumberish;
    reserve1: BigNumberish;
    claimable1: BigNumberish;
    gauge: AddressLike;
    gauge_total_supply: BigNumberish;
    fee: AddressLike;
    bribe: AddressLike;
    emissions: BigNumberish;
    emissions_token: AddressLike;
    emissions_token_decimals: BigNumberish;
    account_lp_balance: BigNumberish;
    account_token0_balance: BigNumberish;
    account_token1_balance: BigNumberish;
    account_gauge_balance: BigNumberish;
    account_gauge_earned: BigNumberish;
  };

  export type PairInfoStructOutput = [
    pair_address: string,
    symbol: string,
    name: string,
    decimals: bigint,
    stable: boolean,
    total_supply: bigint,
    token0: string,
    token0_symbol: string,
    token0_decimals: bigint,
    reserve0: bigint,
    claimable0: bigint,
    token1: string,
    token1_symbol: string,
    token1_decimals: bigint,
    reserve1: bigint,
    claimable1: bigint,
    gauge: string,
    gauge_total_supply: bigint,
    fee: string,
    bribe: string,
    emissions: bigint,
    emissions_token: string,
    emissions_token_decimals: bigint,
    account_lp_balance: bigint,
    account_token0_balance: bigint,
    account_token1_balance: bigint,
    account_gauge_balance: bigint,
    account_gauge_earned: bigint
  ] & {
    pair_address: string;
    symbol: string;
    name: string;
    decimals: bigint;
    stable: boolean;
    total_supply: bigint;
    token0: string;
    token0_symbol: string;
    token0_decimals: bigint;
    reserve0: bigint;
    claimable0: bigint;
    token1: string;
    token1_symbol: string;
    token1_decimals: bigint;
    reserve1: bigint;
    claimable1: bigint;
    gauge: string;
    gauge_total_supply: bigint;
    fee: string;
    bribe: string;
    emissions: bigint;
    emissions_token: string;
    emissions_token_decimals: bigint;
    account_lp_balance: bigint;
    account_token0_balance: bigint;
    account_token1_balance: bigint;
    account_gauge_balance: bigint;
    account_gauge_earned: bigint;
  };

  export type TokenBribeStruct = {
    token: AddressLike;
    decimals: BigNumberish;
    amount: BigNumberish;
    symbol: string;
  };

  export type TokenBribeStructOutput = [
    token: string,
    decimals: bigint,
    amount: bigint,
    symbol: string
  ] & { token: string; decimals: bigint; amount: bigint; symbol: string };

  export type PairBribeEpochStruct = {
    epochTimestamp: BigNumberish;
    totalVotes: BigNumberish;
    pair: AddressLike;
    bribes: PairAPI.TokenBribeStruct[];
  };

  export type PairBribeEpochStructOutput = [
    epochTimestamp: bigint,
    totalVotes: bigint,
    pair: string,
    bribes: PairAPI.TokenBribeStructOutput[]
  ] & {
    epochTimestamp: bigint;
    totalVotes: bigint;
    pair: string;
    bribes: PairAPI.TokenBribeStructOutput[];
  };
}

export interface PairAPIInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "MAX_EPOCHS"
      | "MAX_PAIRS"
      | "MAX_REWARDS"
      | "WEEK"
      | "getAllPair"
      | "getPair"
      | "getPairBribe"
      | "initialize"
      | "left"
      | "owner"
      | "pairFactory"
      | "setOwner"
      | "setVoter"
      | "underlyingToken"
      | "voter"
      | "wBribeFactory"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "Initialized" | "Owner" | "Voter" | "WBF"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "MAX_EPOCHS",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "MAX_PAIRS", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "MAX_REWARDS",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "WEEK", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAllPair",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPair",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPairBribe",
    values: [BigNumberish, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "left",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pairFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setOwner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setVoter",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "underlyingToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "voter", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "wBribeFactory",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "MAX_EPOCHS", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "MAX_PAIRS", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MAX_REWARDS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "WEEK", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getAllPair", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getPair", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPairBribe",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "left", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pairFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setVoter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "underlyingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "voter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "wBribeFactory",
    data: BytesLike
  ): Result;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnerEvent {
  export type InputTuple = [oldOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [oldOwner: string, newOwner: string];
  export interface OutputObject {
    oldOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VoterEvent {
  export type InputTuple = [oldVoter: AddressLike, newVoter: AddressLike];
  export type OutputTuple = [oldVoter: string, newVoter: string];
  export interface OutputObject {
    oldVoter: string;
    newVoter: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WBFEvent {
  export type InputTuple = [oldWBF: AddressLike, newWBF: AddressLike];
  export type OutputTuple = [oldWBF: string, newWBF: string];
  export interface OutputObject {
    oldWBF: string;
    newWBF: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PairAPI extends BaseContract {
  connect(runner?: ContractRunner | null): PairAPI;
  waitForDeployment(): Promise<this>;

  interface: PairAPIInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MAX_EPOCHS: TypedContractMethod<[], [bigint], "view">;

  MAX_PAIRS: TypedContractMethod<[], [bigint], "view">;

  MAX_REWARDS: TypedContractMethod<[], [bigint], "view">;

  WEEK: TypedContractMethod<[], [bigint], "view">;

  getAllPair: TypedContractMethod<
    [_user: AddressLike, _amounts: BigNumberish, _offset: BigNumberish],
    [PairAPI.PairInfoStructOutput[]],
    "view"
  >;

  getPair: TypedContractMethod<
    [_pair: AddressLike, _account: AddressLike],
    [PairAPI.PairInfoStructOutput],
    "view"
  >;

  getPairBribe: TypedContractMethod<
    [_amounts: BigNumberish, _offset: BigNumberish, _pair: AddressLike],
    [PairAPI.PairBribeEpochStructOutput[]],
    "view"
  >;

  initialize: TypedContractMethod<[_voter: AddressLike], [void], "nonpayable">;

  left: TypedContractMethod<
    [_pair: AddressLike, _token: AddressLike],
    [bigint],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  pairFactory: TypedContractMethod<[], [string], "view">;

  setOwner: TypedContractMethod<[_owner: AddressLike], [void], "nonpayable">;

  setVoter: TypedContractMethod<[_voter: AddressLike], [void], "nonpayable">;

  underlyingToken: TypedContractMethod<[], [string], "view">;

  voter: TypedContractMethod<[], [string], "view">;

  wBribeFactory: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MAX_EPOCHS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_PAIRS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_REWARDS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "WEEK"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getAllPair"
  ): TypedContractMethod<
    [_user: AddressLike, _amounts: BigNumberish, _offset: BigNumberish],
    [PairAPI.PairInfoStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPair"
  ): TypedContractMethod<
    [_pair: AddressLike, _account: AddressLike],
    [PairAPI.PairInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPairBribe"
  ): TypedContractMethod<
    [_amounts: BigNumberish, _offset: BigNumberish, _pair: AddressLike],
    [PairAPI.PairBribeEpochStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[_voter: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "left"
  ): TypedContractMethod<
    [_pair: AddressLike, _token: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pairFactory"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setOwner"
  ): TypedContractMethod<[_owner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setVoter"
  ): TypedContractMethod<[_voter: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "underlyingToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "voter"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "wBribeFactory"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "Owner"
  ): TypedContractEvent<
    OwnerEvent.InputTuple,
    OwnerEvent.OutputTuple,
    OwnerEvent.OutputObject
  >;
  getEvent(
    key: "Voter"
  ): TypedContractEvent<
    VoterEvent.InputTuple,
    VoterEvent.OutputTuple,
    VoterEvent.OutputObject
  >;
  getEvent(
    key: "WBF"
  ): TypedContractEvent<
    WBFEvent.InputTuple,
    WBFEvent.OutputTuple,
    WBFEvent.OutputObject
  >;

  filters: {
    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "Owner(address,address)": TypedContractEvent<
      OwnerEvent.InputTuple,
      OwnerEvent.OutputTuple,
      OwnerEvent.OutputObject
    >;
    Owner: TypedContractEvent<
      OwnerEvent.InputTuple,
      OwnerEvent.OutputTuple,
      OwnerEvent.OutputObject
    >;

    "Voter(address,address)": TypedContractEvent<
      VoterEvent.InputTuple,
      VoterEvent.OutputTuple,
      VoterEvent.OutputObject
    >;
    Voter: TypedContractEvent<
      VoterEvent.InputTuple,
      VoterEvent.OutputTuple,
      VoterEvent.OutputObject
    >;

    "WBF(address,address)": TypedContractEvent<
      WBFEvent.InputTuple,
      WBFEvent.OutputTuple,
      WBFEvent.OutputObject
    >;
    WBF: TypedContractEvent<
      WBFEvent.InputTuple,
      WBFEvent.OutputTuple,
      WBFEvent.OutputObject
    >;
  };
}
