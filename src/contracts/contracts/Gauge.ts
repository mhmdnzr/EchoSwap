/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface GaugeInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "_ve"
      | "balanceOf"
      | "batchRewardPerToken"
      | "batchUpdateRewardPerToken"
      | "checkpoints"
      | "claimFees"
      | "deposit"
      | "depositAll"
      | "derivedBalance"
      | "derivedBalances"
      | "derivedSupply"
      | "earned"
      | "external_bribe"
      | "fees0"
      | "fees1"
      | "getPriorBalanceIndex"
      | "getPriorRewardPerToken"
      | "getPriorSupplyIndex"
      | "getReward"
      | "internal_bribe"
      | "isForPair"
      | "isReward"
      | "lastEarn"
      | "lastTimeRewardApplicable"
      | "lastUpdateTime"
      | "left"
      | "notifyRewardAmount"
      | "numCheckpoints"
      | "periodFinish"
      | "rewardPerToken"
      | "rewardPerTokenCheckpoints"
      | "rewardPerTokenNumCheckpoints"
      | "rewardPerTokenStored"
      | "rewardRate"
      | "rewards"
      | "rewardsListLength"
      | "stake"
      | "supplyCheckpoints"
      | "supplyNumCheckpoints"
      | "swapOutRewardToken"
      | "tokenIds"
      | "totalSupply"
      | "userRewardPerTokenStored"
      | "voter"
      | "withdraw"
      | "withdrawAll"
      | "withdrawToken"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ClaimFees"
      | "ClaimRewards"
      | "Deposit"
      | "NotifyReward"
      | "Withdraw"
  ): EventFragment;

  encodeFunctionData(functionFragment: "_ve", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "batchRewardPerToken",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "batchUpdateRewardPerToken",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkpoints",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "claimFees", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositAll",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "derivedBalance",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "derivedBalances",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "derivedSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "earned",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "external_bribe",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "fees0", values?: undefined): string;
  encodeFunctionData(functionFragment: "fees1", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getPriorBalanceIndex",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPriorRewardPerToken",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPriorSupplyIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getReward",
    values: [AddressLike, AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "internal_bribe",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isForPair", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isReward",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lastEarn",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lastTimeRewardApplicable",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lastUpdateTime",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "left", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "notifyRewardAmount",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "numCheckpoints",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "periodFinish",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardPerToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardPerTokenCheckpoints",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardPerTokenNumCheckpoints",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardPerTokenStored",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardRate",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rewards",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardsListLength",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "stake", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "supplyCheckpoints",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supplyNumCheckpoints",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "swapOutRewardToken",
    values: [BigNumberish, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenIds",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "userRewardPerTokenStored",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "voter", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAll",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawToken",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "_ve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "batchRewardPerToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchUpdateRewardPerToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkpoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimFees", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "depositAll", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "derivedBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "derivedBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "derivedSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "earned", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "external_bribe",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fees0", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fees1", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPriorBalanceIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPriorRewardPerToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPriorSupplyIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getReward", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "internal_bribe",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isForPair", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isReward", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lastEarn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastTimeRewardApplicable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastUpdateTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "left", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "notifyRewardAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numCheckpoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "periodFinish",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardPerToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardPerTokenCheckpoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardPerTokenNumCheckpoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardPerTokenStored",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rewardRate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rewards", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardsListLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supplyCheckpoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supplyNumCheckpoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapOutRewardToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenIds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userRewardPerTokenStored",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "voter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawToken",
    data: BytesLike
  ): Result;
}

export namespace ClaimFeesEvent {
  export type InputTuple = [
    from: AddressLike,
    claimed0: BigNumberish,
    claimed1: BigNumberish
  ];
  export type OutputTuple = [from: string, claimed0: bigint, claimed1: bigint];
  export interface OutputObject {
    from: string;
    claimed0: bigint;
    claimed1: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClaimRewardsEvent {
  export type InputTuple = [
    from: AddressLike,
    reward: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [from: string, reward: string, amount: bigint];
  export interface OutputObject {
    from: string;
    reward: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositEvent {
  export type InputTuple = [
    from: AddressLike,
    tokenId: BigNumberish,
    amount: BigNumberish
  ];
  export type OutputTuple = [from: string, tokenId: bigint, amount: bigint];
  export interface OutputObject {
    from: string;
    tokenId: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NotifyRewardEvent {
  export type InputTuple = [
    from: AddressLike,
    reward: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [from: string, reward: string, amount: bigint];
  export interface OutputObject {
    from: string;
    reward: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawEvent {
  export type InputTuple = [
    from: AddressLike,
    tokenId: BigNumberish,
    amount: BigNumberish
  ];
  export type OutputTuple = [from: string, tokenId: bigint, amount: bigint];
  export interface OutputObject {
    from: string;
    tokenId: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Gauge extends BaseContract {
  connect(runner?: ContractRunner | null): Gauge;
  waitForDeployment(): Promise<this>;

  interface: GaugeInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  _ve: TypedContractMethod<[], [string], "view">;

  balanceOf: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  batchRewardPerToken: TypedContractMethod<
    [token: AddressLike, maxRuns: BigNumberish],
    [void],
    "nonpayable"
  >;

  batchUpdateRewardPerToken: TypedContractMethod<
    [token: AddressLike, maxRuns: BigNumberish],
    [void],
    "nonpayable"
  >;

  checkpoints: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [[bigint, bigint] & { timestamp: bigint; balanceOf: bigint }],
    "view"
  >;

  claimFees: TypedContractMethod<
    [],
    [[bigint, bigint] & { claimed0: bigint; claimed1: bigint }],
    "nonpayable"
  >;

  deposit: TypedContractMethod<
    [amount: BigNumberish, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  depositAll: TypedContractMethod<
    [tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  derivedBalance: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  derivedBalances: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  derivedSupply: TypedContractMethod<[], [bigint], "view">;

  earned: TypedContractMethod<
    [token: AddressLike, account: AddressLike],
    [bigint],
    "view"
  >;

  external_bribe: TypedContractMethod<[], [string], "view">;

  fees0: TypedContractMethod<[], [bigint], "view">;

  fees1: TypedContractMethod<[], [bigint], "view">;

  getPriorBalanceIndex: TypedContractMethod<
    [account: AddressLike, timestamp: BigNumberish],
    [bigint],
    "view"
  >;

  getPriorRewardPerToken: TypedContractMethod<
    [token: AddressLike, timestamp: BigNumberish],
    [[bigint, bigint]],
    "view"
  >;

  getPriorSupplyIndex: TypedContractMethod<
    [timestamp: BigNumberish],
    [bigint],
    "view"
  >;

  getReward: TypedContractMethod<
    [account: AddressLike, tokens: AddressLike[]],
    [void],
    "nonpayable"
  >;

  internal_bribe: TypedContractMethod<[], [string], "view">;

  isForPair: TypedContractMethod<[], [boolean], "view">;

  isReward: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  lastEarn: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;

  lastTimeRewardApplicable: TypedContractMethod<
    [token: AddressLike],
    [bigint],
    "view"
  >;

  lastUpdateTime: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  left: TypedContractMethod<[token: AddressLike], [bigint], "view">;

  notifyRewardAmount: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  numCheckpoints: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  periodFinish: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  rewardPerToken: TypedContractMethod<[token: AddressLike], [bigint], "view">;

  rewardPerTokenCheckpoints: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [[bigint, bigint] & { timestamp: bigint; rewardPerToken: bigint }],
    "view"
  >;

  rewardPerTokenNumCheckpoints: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  rewardPerTokenStored: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  rewardRate: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  rewards: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  rewardsListLength: TypedContractMethod<[], [bigint], "view">;

  stake: TypedContractMethod<[], [string], "view">;

  supplyCheckpoints: TypedContractMethod<
    [arg0: BigNumberish],
    [[bigint, bigint] & { timestamp: bigint; supply: bigint }],
    "view"
  >;

  supplyNumCheckpoints: TypedContractMethod<[], [bigint], "view">;

  swapOutRewardToken: TypedContractMethod<
    [i: BigNumberish, oldToken: AddressLike, newToken: AddressLike],
    [void],
    "nonpayable"
  >;

  tokenIds: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  userRewardPerTokenStored: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;

  voter: TypedContractMethod<[], [string], "view">;

  withdraw: TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;

  withdrawAll: TypedContractMethod<[], [void], "nonpayable">;

  withdrawToken: TypedContractMethod<
    [amount: BigNumberish, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "_ve"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "batchRewardPerToken"
  ): TypedContractMethod<
    [token: AddressLike, maxRuns: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "batchUpdateRewardPerToken"
  ): TypedContractMethod<
    [token: AddressLike, maxRuns: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "checkpoints"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [[bigint, bigint] & { timestamp: bigint; balanceOf: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "claimFees"
  ): TypedContractMethod<
    [],
    [[bigint, bigint] & { claimed0: bigint; claimed1: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<
    [amount: BigNumberish, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "depositAll"
  ): TypedContractMethod<[tokenId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "derivedBalance"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "derivedBalances"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "derivedSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "earned"
  ): TypedContractMethod<
    [token: AddressLike, account: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "external_bribe"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "fees0"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "fees1"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPriorBalanceIndex"
  ): TypedContractMethod<
    [account: AddressLike, timestamp: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPriorRewardPerToken"
  ): TypedContractMethod<
    [token: AddressLike, timestamp: BigNumberish],
    [[bigint, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPriorSupplyIndex"
  ): TypedContractMethod<[timestamp: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getReward"
  ): TypedContractMethod<
    [account: AddressLike, tokens: AddressLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "internal_bribe"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "isForPair"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "isReward"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "lastEarn"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "lastTimeRewardApplicable"
  ): TypedContractMethod<[token: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "lastUpdateTime"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "left"
  ): TypedContractMethod<[token: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "notifyRewardAmount"
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "numCheckpoints"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "periodFinish"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "rewardPerToken"
  ): TypedContractMethod<[token: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "rewardPerTokenCheckpoints"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [[bigint, bigint] & { timestamp: bigint; rewardPerToken: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "rewardPerTokenNumCheckpoints"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "rewardPerTokenStored"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "rewardRate"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "rewards"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "rewardsListLength"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "stake"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "supplyCheckpoints"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [[bigint, bigint] & { timestamp: bigint; supply: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "supplyNumCheckpoints"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "swapOutRewardToken"
  ): TypedContractMethod<
    [i: BigNumberish, oldToken: AddressLike, newToken: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "tokenIds"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "userRewardPerTokenStored"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "voter"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawAll"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawToken"
  ): TypedContractMethod<
    [amount: BigNumberish, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "ClaimFees"
  ): TypedContractEvent<
    ClaimFeesEvent.InputTuple,
    ClaimFeesEvent.OutputTuple,
    ClaimFeesEvent.OutputObject
  >;
  getEvent(
    key: "ClaimRewards"
  ): TypedContractEvent<
    ClaimRewardsEvent.InputTuple,
    ClaimRewardsEvent.OutputTuple,
    ClaimRewardsEvent.OutputObject
  >;
  getEvent(
    key: "Deposit"
  ): TypedContractEvent<
    DepositEvent.InputTuple,
    DepositEvent.OutputTuple,
    DepositEvent.OutputObject
  >;
  getEvent(
    key: "NotifyReward"
  ): TypedContractEvent<
    NotifyRewardEvent.InputTuple,
    NotifyRewardEvent.OutputTuple,
    NotifyRewardEvent.OutputObject
  >;
  getEvent(
    key: "Withdraw"
  ): TypedContractEvent<
    WithdrawEvent.InputTuple,
    WithdrawEvent.OutputTuple,
    WithdrawEvent.OutputObject
  >;

  filters: {
    "ClaimFees(address,uint256,uint256)": TypedContractEvent<
      ClaimFeesEvent.InputTuple,
      ClaimFeesEvent.OutputTuple,
      ClaimFeesEvent.OutputObject
    >;
    ClaimFees: TypedContractEvent<
      ClaimFeesEvent.InputTuple,
      ClaimFeesEvent.OutputTuple,
      ClaimFeesEvent.OutputObject
    >;

    "ClaimRewards(address,address,uint256)": TypedContractEvent<
      ClaimRewardsEvent.InputTuple,
      ClaimRewardsEvent.OutputTuple,
      ClaimRewardsEvent.OutputObject
    >;
    ClaimRewards: TypedContractEvent<
      ClaimRewardsEvent.InputTuple,
      ClaimRewardsEvent.OutputTuple,
      ClaimRewardsEvent.OutputObject
    >;

    "Deposit(address,uint256,uint256)": TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;
    Deposit: TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;

    "NotifyReward(address,address,uint256)": TypedContractEvent<
      NotifyRewardEvent.InputTuple,
      NotifyRewardEvent.OutputTuple,
      NotifyRewardEvent.OutputObject
    >;
    NotifyReward: TypedContractEvent<
      NotifyRewardEvent.InputTuple,
      NotifyRewardEvent.OutputTuple,
      NotifyRewardEvent.OutputObject
    >;

    "Withdraw(address,uint256,uint256)": TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
    Withdraw: TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
  };
}
