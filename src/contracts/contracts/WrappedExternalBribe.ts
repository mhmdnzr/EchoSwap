/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface WrappedExternalBribeInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "_ve"
      | "earned"
      | "getEpochStart"
      | "getReward"
      | "getRewardForOwner"
      | "isReward"
      | "lastEarn"
      | "lastTimeRewardApplicable"
      | "left"
      | "notifyRewardAmount"
      | "periodFinish"
      | "rewards"
      | "rewardsListLength"
      | "swapOutRewardToken"
      | "tokenRewardsPerEpoch"
      | "underlying_bribe"
      | "voter"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "ClaimRewards" | "NotifyReward"
  ): EventFragment;

  encodeFunctionData(functionFragment: "_ve", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "earned",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getEpochStart",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getReward",
    values: [BigNumberish, AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardForOwner",
    values: [BigNumberish, AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "isReward",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lastEarn",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lastTimeRewardApplicable",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "left", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "notifyRewardAmount",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "periodFinish",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rewards",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardsListLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "swapOutRewardToken",
    values: [BigNumberish, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenRewardsPerEpoch",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "underlying_bribe",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "voter", values?: undefined): string;

  decodeFunctionResult(functionFragment: "_ve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "earned", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getEpochStart",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getReward", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRewardForOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isReward", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lastEarn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastTimeRewardApplicable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "left", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "notifyRewardAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "periodFinish",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rewards", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardsListLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapOutRewardToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenRewardsPerEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "underlying_bribe",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "voter", data: BytesLike): Result;
}

export namespace ClaimRewardsEvent {
  export type InputTuple = [
    from: AddressLike,
    reward: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [from: string, reward: string, amount: bigint];
  export interface OutputObject {
    from: string;
    reward: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NotifyRewardEvent {
  export type InputTuple = [
    from: AddressLike,
    reward: AddressLike,
    epoch: BigNumberish,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    from: string,
    reward: string,
    epoch: bigint,
    amount: bigint
  ];
  export interface OutputObject {
    from: string;
    reward: string;
    epoch: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface WrappedExternalBribe extends BaseContract {
  connect(runner?: ContractRunner | null): WrappedExternalBribe;
  waitForDeployment(): Promise<this>;

  interface: WrappedExternalBribeInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  _ve: TypedContractMethod<[], [string], "view">;

  earned: TypedContractMethod<
    [token: AddressLike, tokenId: BigNumberish],
    [bigint],
    "view"
  >;

  getEpochStart: TypedContractMethod<
    [timestamp: BigNumberish],
    [bigint],
    "view"
  >;

  getReward: TypedContractMethod<
    [tokenId: BigNumberish, tokens: AddressLike[]],
    [void],
    "nonpayable"
  >;

  getRewardForOwner: TypedContractMethod<
    [tokenId: BigNumberish, tokens: AddressLike[]],
    [void],
    "nonpayable"
  >;

  isReward: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  lastEarn: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  lastTimeRewardApplicable: TypedContractMethod<
    [token: AddressLike],
    [bigint],
    "view"
  >;

  left: TypedContractMethod<[token: AddressLike], [bigint], "view">;

  notifyRewardAmount: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  periodFinish: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  rewards: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  rewardsListLength: TypedContractMethod<[], [bigint], "view">;

  swapOutRewardToken: TypedContractMethod<
    [i: BigNumberish, oldToken: AddressLike, newToken: AddressLike],
    [void],
    "nonpayable"
  >;

  tokenRewardsPerEpoch: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  underlying_bribe: TypedContractMethod<[], [string], "view">;

  voter: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "_ve"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "earned"
  ): TypedContractMethod<
    [token: AddressLike, tokenId: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getEpochStart"
  ): TypedContractMethod<[timestamp: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getReward"
  ): TypedContractMethod<
    [tokenId: BigNumberish, tokens: AddressLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getRewardForOwner"
  ): TypedContractMethod<
    [tokenId: BigNumberish, tokens: AddressLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isReward"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "lastEarn"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "lastTimeRewardApplicable"
  ): TypedContractMethod<[token: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "left"
  ): TypedContractMethod<[token: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "notifyRewardAmount"
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "periodFinish"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "rewards"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "rewardsListLength"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "swapOutRewardToken"
  ): TypedContractMethod<
    [i: BigNumberish, oldToken: AddressLike, newToken: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "tokenRewardsPerEpoch"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "underlying_bribe"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "voter"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "ClaimRewards"
  ): TypedContractEvent<
    ClaimRewardsEvent.InputTuple,
    ClaimRewardsEvent.OutputTuple,
    ClaimRewardsEvent.OutputObject
  >;
  getEvent(
    key: "NotifyReward"
  ): TypedContractEvent<
    NotifyRewardEvent.InputTuple,
    NotifyRewardEvent.OutputTuple,
    NotifyRewardEvent.OutputObject
  >;

  filters: {
    "ClaimRewards(address,address,uint256)": TypedContractEvent<
      ClaimRewardsEvent.InputTuple,
      ClaimRewardsEvent.OutputTuple,
      ClaimRewardsEvent.OutputObject
    >;
    ClaimRewards: TypedContractEvent<
      ClaimRewardsEvent.InputTuple,
      ClaimRewardsEvent.OutputTuple,
      ClaimRewardsEvent.OutputObject
    >;

    "NotifyReward(address,address,uint256,uint256)": TypedContractEvent<
      NotifyRewardEvent.InputTuple,
      NotifyRewardEvent.OutputTuple,
      NotifyRewardEvent.OutputObject
    >;
    NotifyReward: TypedContractEvent<
      NotifyRewardEvent.InputTuple,
      NotifyRewardEvent.OutputTuple,
      NotifyRewardEvent.OutputObject
    >;
  };
}
