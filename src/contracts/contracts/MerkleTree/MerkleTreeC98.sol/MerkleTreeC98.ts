/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface MerkleTreeC98Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "claim"
      | "hasClaimed"
      | "info"
      | "init"
      | "isFnftOwner"
      | "merkleRoot"
      | "owner"
      | "ownersToFnft"
      | "setMerkleRoot"
      | "setOwner"
      | "swFnftToOwner"
      | "token"
      | "ve"
      | "withdrawERC20"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "ClaimSet"): EventFragment;

  encodeFunctionData(
    functionFragment: "claim",
    values: [AddressLike, BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "hasClaimed",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "info", values?: undefined): string;
  encodeFunctionData(functionFragment: "init", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isFnftOwner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "merkleRoot",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownersToFnft",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setMerkleRoot",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setOwner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "swFnftToOwner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(functionFragment: "ve", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawERC20",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasClaimed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "info", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isFnftOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "merkleRoot", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ownersToFnft",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMerkleRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "swFnftToOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawERC20",
    data: BytesLike
  ): Result;
}

export namespace ClaimSetEvent {
  export type InputTuple = [
    who: AddressLike,
    to: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [who: string, to: string, amount: bigint];
  export interface OutputObject {
    who: string;
    to: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MerkleTreeC98 extends BaseContract {
  connect(runner?: ContractRunner | null): MerkleTreeC98;
  waitForDeployment(): Promise<this>;

  interface: MerkleTreeC98Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  claim: TypedContractMethod<
    [to: AddressLike, amount: BigNumberish, proof: BytesLike[]],
    [void],
    "nonpayable"
  >;

  hasClaimed: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  info: TypedContractMethod<[], [string], "view">;

  init: TypedContractMethod<[], [boolean], "view">;

  isFnftOwner: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  merkleRoot: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  ownersToFnft: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  setMerkleRoot: TypedContractMethod<
    [_merkleRoot: BytesLike],
    [void],
    "nonpayable"
  >;

  setOwner: TypedContractMethod<[_owner: AddressLike], [void], "nonpayable">;

  swFnftToOwner: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  token: TypedContractMethod<[], [string], "view">;

  ve: TypedContractMethod<[], [string], "view">;

  withdrawERC20: TypedContractMethod<
    [_token: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "claim"
  ): TypedContractMethod<
    [to: AddressLike, amount: BigNumberish, proof: BytesLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasClaimed"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "info"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "init"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "isFnftOwner"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "merkleRoot"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ownersToFnft"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "setMerkleRoot"
  ): TypedContractMethod<[_merkleRoot: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setOwner"
  ): TypedContractMethod<[_owner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "swFnftToOwner"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "token"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(nameOrSignature: "ve"): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "withdrawERC20"
  ): TypedContractMethod<[_token: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "ClaimSet"
  ): TypedContractEvent<
    ClaimSetEvent.InputTuple,
    ClaimSetEvent.OutputTuple,
    ClaimSetEvent.OutputObject
  >;

  filters: {
    "ClaimSet(address,address,uint256)": TypedContractEvent<
      ClaimSetEvent.InputTuple,
      ClaimSetEvent.OutputTuple,
      ClaimSetEvent.OutputObject
    >;
    ClaimSet: TypedContractEvent<
      ClaimSetEvent.InputTuple,
      ClaimSetEvent.OutputTuple,
      ClaimSetEvent.OutputObject
    >;
  };
}
