/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface EchoLibraryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getAmountOut"
      | "getMinimumValue"
      | "getSample"
      | "getTradeDiff(uint256,address,address,bool)"
      | "getTradeDiff(uint256,address,address)"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getAmountOut",
    values: [BigNumberish, AddressLike, AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getMinimumValue",
    values: [AddressLike, AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getSample",
    values: [AddressLike, AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getTradeDiff(uint256,address,address,bool)",
    values: [BigNumberish, AddressLike, AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getTradeDiff(uint256,address,address)",
    values: [BigNumberish, AddressLike, AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "getAmountOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinimumValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getSample", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTradeDiff(uint256,address,address,bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTradeDiff(uint256,address,address)",
    data: BytesLike
  ): Result;
}

export interface EchoLibrary extends BaseContract {
  connect(runner?: ContractRunner | null): EchoLibrary;
  waitForDeployment(): Promise<this>;

  interface: EchoLibraryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getAmountOut: TypedContractMethod<
    [
      amountIn: BigNumberish,
      tokenIn: AddressLike,
      tokenOut: AddressLike,
      stable: boolean
    ],
    [bigint],
    "view"
  >;

  getMinimumValue: TypedContractMethod<
    [tokenIn: AddressLike, tokenOut: AddressLike, stable: boolean],
    [[bigint, bigint, bigint]],
    "view"
  >;

  getSample: TypedContractMethod<
    [tokenIn: AddressLike, tokenOut: AddressLike, stable: boolean],
    [bigint],
    "view"
  >;

  "getTradeDiff(uint256,address,address,bool)": TypedContractMethod<
    [
      amountIn: BigNumberish,
      tokenIn: AddressLike,
      tokenOut: AddressLike,
      stable: boolean
    ],
    [[bigint, bigint] & { a: bigint; b: bigint }],
    "view"
  >;

  "getTradeDiff(uint256,address,address)": TypedContractMethod<
    [amountIn: BigNumberish, tokenIn: AddressLike, pair: AddressLike],
    [[bigint, bigint] & { a: bigint; b: bigint }],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getAmountOut"
  ): TypedContractMethod<
    [
      amountIn: BigNumberish,
      tokenIn: AddressLike,
      tokenOut: AddressLike,
      stable: boolean
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getMinimumValue"
  ): TypedContractMethod<
    [tokenIn: AddressLike, tokenOut: AddressLike, stable: boolean],
    [[bigint, bigint, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSample"
  ): TypedContractMethod<
    [tokenIn: AddressLike, tokenOut: AddressLike, stable: boolean],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTradeDiff(uint256,address,address,bool)"
  ): TypedContractMethod<
    [
      amountIn: BigNumberish,
      tokenIn: AddressLike,
      tokenOut: AddressLike,
      stable: boolean
    ],
    [[bigint, bigint] & { a: bigint; b: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTradeDiff(uint256,address,address)"
  ): TypedContractMethod<
    [amountIn: BigNumberish, tokenIn: AddressLike, pair: AddressLike],
    [[bigint, bigint] & { a: bigint; b: bigint }],
    "view"
  >;

  filters: {};
}
