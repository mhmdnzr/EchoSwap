/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace MasterChef {
  export type PoolInfoStruct = {
    accRewardPerShare: BigNumberish;
    lastRewardTime: BigNumberish;
  };

  export type PoolInfoStructOutput = [
    accRewardPerShare: bigint,
    lastRewardTime: bigint
  ] & { accRewardPerShare: bigint; lastRewardTime: bigint };
}

export interface MasterChefInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "NFT"
      | "WBNB"
      | "addKeeper"
      | "deposit"
      | "distributePeriod"
      | "harvest"
      | "isKeeper"
      | "lastDistributedTime"
      | "onERC721Received"
      | "owner"
      | "pendingReward"
      | "poolInfo"
      | "removeKeeper"
      | "renounceOwnership"
      | "rewardPerSecond"
      | "setDistributionRate"
      | "setRewardPerSecond"
      | "stakedTokenIds"
      | "tokenOwner"
      | "transferOwnership"
      | "updatePool"
      | "userInfo"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Deposit"
      | "Harvest"
      | "LogRewardPerSecond"
      | "LogUpdatePool"
      | "OwnershipTransferred"
      | "Withdraw"
  ): EventFragment;

  encodeFunctionData(functionFragment: "NFT", values?: undefined): string;
  encodeFunctionData(functionFragment: "WBNB", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addKeeper",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "distributePeriod",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "harvest", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isKeeper",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lastDistributedTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingReward",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "poolInfo", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeKeeper",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardPerSecond",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setDistributionRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardPerSecond",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stakedTokenIds",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenOwner",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "userInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish[]]
  ): string;

  decodeFunctionResult(functionFragment: "NFT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "WBNB", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addKeeper", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "distributePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "harvest", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isKeeper", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastDistributedTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "poolInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeKeeper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardPerSecond",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDistributionRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardPerSecond",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakedTokenIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updatePool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace DepositEvent {
  export type InputTuple = [
    user: AddressLike,
    amount: BigNumberish,
    to: AddressLike
  ];
  export type OutputTuple = [user: string, amount: bigint, to: string];
  export interface OutputObject {
    user: string;
    amount: bigint;
    to: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace HarvestEvent {
  export type InputTuple = [user: AddressLike, amount: BigNumberish];
  export type OutputTuple = [user: string, amount: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogRewardPerSecondEvent {
  export type InputTuple = [rewardPerSecond: BigNumberish];
  export type OutputTuple = [rewardPerSecond: bigint];
  export interface OutputObject {
    rewardPerSecond: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogUpdatePoolEvent {
  export type InputTuple = [
    lastRewardTime: BigNumberish,
    nftSupply: BigNumberish,
    accRewardPerShare: BigNumberish
  ];
  export type OutputTuple = [
    lastRewardTime: bigint,
    nftSupply: bigint,
    accRewardPerShare: bigint
  ];
  export interface OutputObject {
    lastRewardTime: bigint;
    nftSupply: bigint;
    accRewardPerShare: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawEvent {
  export type InputTuple = [
    user: AddressLike,
    amount: BigNumberish,
    to: AddressLike
  ];
  export type OutputTuple = [user: string, amount: bigint, to: string];
  export interface OutputObject {
    user: string;
    amount: bigint;
    to: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MasterChef extends BaseContract {
  connect(runner?: ContractRunner | null): MasterChef;
  waitForDeployment(): Promise<this>;

  interface: MasterChefInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  NFT: TypedContractMethod<[], [string], "view">;

  WBNB: TypedContractMethod<[], [string], "view">;

  addKeeper: TypedContractMethod<
    [_keepers: AddressLike[]],
    [void],
    "nonpayable"
  >;

  deposit: TypedContractMethod<
    [tokenIds: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  distributePeriod: TypedContractMethod<[], [bigint], "view">;

  harvest: TypedContractMethod<[], [void], "nonpayable">;

  isKeeper: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  lastDistributedTime: TypedContractMethod<[], [bigint], "view">;

  onERC721Received: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish, arg3: BytesLike],
    [string],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  pendingReward: TypedContractMethod<[_user: AddressLike], [bigint], "view">;

  poolInfo: TypedContractMethod<
    [],
    [[bigint, bigint] & { accRewardPerShare: bigint; lastRewardTime: bigint }],
    "view"
  >;

  removeKeeper: TypedContractMethod<
    [_keepers: AddressLike[]],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  rewardPerSecond: TypedContractMethod<[], [bigint], "view">;

  setDistributionRate: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  setRewardPerSecond: TypedContractMethod<
    [_rewardPerSecond: BigNumberish],
    [void],
    "nonpayable"
  >;

  stakedTokenIds: TypedContractMethod<[_user: AddressLike], [bigint[]], "view">;

  tokenOwner: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updatePool: TypedContractMethod<
    [],
    [MasterChef.PoolInfoStructOutput],
    "nonpayable"
  >;

  userInfo: TypedContractMethod<
    [arg0: AddressLike],
    [[bigint, bigint] & { amount: bigint; rewardDebt: bigint }],
    "view"
  >;

  withdraw: TypedContractMethod<
    [tokenIds: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "NFT"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "WBNB"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "addKeeper"
  ): TypedContractMethod<[_keepers: AddressLike[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<[tokenIds: BigNumberish[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "distributePeriod"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "harvest"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "isKeeper"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "lastDistributedTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "onERC721Received"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish, arg3: BytesLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pendingReward"
  ): TypedContractMethod<[_user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "poolInfo"
  ): TypedContractMethod<
    [],
    [[bigint, bigint] & { accRewardPerShare: bigint; lastRewardTime: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "removeKeeper"
  ): TypedContractMethod<[_keepers: AddressLike[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "rewardPerSecond"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "setDistributionRate"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setRewardPerSecond"
  ): TypedContractMethod<
    [_rewardPerSecond: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "stakedTokenIds"
  ): TypedContractMethod<[_user: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "tokenOwner"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updatePool"
  ): TypedContractMethod<[], [MasterChef.PoolInfoStructOutput], "nonpayable">;
  getFunction(
    nameOrSignature: "userInfo"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [[bigint, bigint] & { amount: bigint; rewardDebt: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[tokenIds: BigNumberish[]], [void], "nonpayable">;

  getEvent(
    key: "Deposit"
  ): TypedContractEvent<
    DepositEvent.InputTuple,
    DepositEvent.OutputTuple,
    DepositEvent.OutputObject
  >;
  getEvent(
    key: "Harvest"
  ): TypedContractEvent<
    HarvestEvent.InputTuple,
    HarvestEvent.OutputTuple,
    HarvestEvent.OutputObject
  >;
  getEvent(
    key: "LogRewardPerSecond"
  ): TypedContractEvent<
    LogRewardPerSecondEvent.InputTuple,
    LogRewardPerSecondEvent.OutputTuple,
    LogRewardPerSecondEvent.OutputObject
  >;
  getEvent(
    key: "LogUpdatePool"
  ): TypedContractEvent<
    LogUpdatePoolEvent.InputTuple,
    LogUpdatePoolEvent.OutputTuple,
    LogUpdatePoolEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Withdraw"
  ): TypedContractEvent<
    WithdrawEvent.InputTuple,
    WithdrawEvent.OutputTuple,
    WithdrawEvent.OutputObject
  >;

  filters: {
    "Deposit(address,uint256,address)": TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;
    Deposit: TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;

    "Harvest(address,uint256)": TypedContractEvent<
      HarvestEvent.InputTuple,
      HarvestEvent.OutputTuple,
      HarvestEvent.OutputObject
    >;
    Harvest: TypedContractEvent<
      HarvestEvent.InputTuple,
      HarvestEvent.OutputTuple,
      HarvestEvent.OutputObject
    >;

    "LogRewardPerSecond(uint256)": TypedContractEvent<
      LogRewardPerSecondEvent.InputTuple,
      LogRewardPerSecondEvent.OutputTuple,
      LogRewardPerSecondEvent.OutputObject
    >;
    LogRewardPerSecond: TypedContractEvent<
      LogRewardPerSecondEvent.InputTuple,
      LogRewardPerSecondEvent.OutputTuple,
      LogRewardPerSecondEvent.OutputObject
    >;

    "LogUpdatePool(uint256,uint256,uint256)": TypedContractEvent<
      LogUpdatePoolEvent.InputTuple,
      LogUpdatePoolEvent.OutputTuple,
      LogUpdatePoolEvent.OutputObject
    >;
    LogUpdatePool: TypedContractEvent<
      LogUpdatePoolEvent.InputTuple,
      LogUpdatePoolEvent.OutputTuple,
      LogUpdatePoolEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Withdraw(address,uint256,address)": TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
    Withdraw: TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
  };
}
