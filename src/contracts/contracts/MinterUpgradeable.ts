/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface MinterUpgradeableInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "EMISSION"
      | "LOCK"
      | "MAX_TEAM_RATE"
      | "PRECISION"
      | "REBASEMAX"
      | "TAIL_EMISSION"
      | "WEEK"
      | "_echo"
      | "_initialize"
      | "_rewards_distributor"
      | "_ve"
      | "_voter"
      | "acceptTeam"
      | "active_period"
      | "calculate_emission"
      | "calculate_rebate"
      | "check"
      | "circulating_emission"
      | "circulating_supply"
      | "initialize"
      | "isFirstMint"
      | "owner"
      | "pendingTeam"
      | "period"
      | "renounceOwnership"
      | "setEmission"
      | "setRebase"
      | "setRewardDistributor"
      | "setTeam"
      | "setTeamRate"
      | "setVoter"
      | "team"
      | "teamRate"
      | "transferOwnership"
      | "update_period"
      | "weekly"
      | "weekly_emission"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "Initialized" | "Mint" | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(functionFragment: "EMISSION", values?: undefined): string;
  encodeFunctionData(functionFragment: "LOCK", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "MAX_TEAM_RATE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "PRECISION", values?: undefined): string;
  encodeFunctionData(functionFragment: "REBASEMAX", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "TAIL_EMISSION",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "WEEK", values?: undefined): string;
  encodeFunctionData(functionFragment: "_echo", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "_initialize",
    values: [AddressLike[], BigNumberish[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_rewards_distributor",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "_ve", values?: undefined): string;
  encodeFunctionData(functionFragment: "_voter", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "acceptTeam",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "active_period",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculate_emission",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculate_rebate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "check", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "circulating_emission",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "circulating_supply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isFirstMint",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingTeam",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "period", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setEmission",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRebase",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardDistributor",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setTeam",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setTeamRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setVoter",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "team", values?: undefined): string;
  encodeFunctionData(functionFragment: "teamRate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "update_period",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "weekly", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "weekly_emission",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "EMISSION", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "LOCK", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MAX_TEAM_RATE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "PRECISION", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "REBASEMAX", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "TAIL_EMISSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "WEEK", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_echo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_initialize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_rewards_distributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_ve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_voter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "acceptTeam", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "active_period",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculate_emission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculate_rebate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "check", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "circulating_emission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "circulating_supply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isFirstMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingTeam",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "period", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEmission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setRebase", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setRewardDistributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setTeam", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setTeamRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setVoter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "team", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "teamRate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "update_period",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "weekly", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "weekly_emission",
    data: BytesLike
  ): Result;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MintEvent {
  export type InputTuple = [
    sender: AddressLike,
    weekly: BigNumberish,
    circulating_supply: BigNumberish,
    circulating_emission: BigNumberish
  ];
  export type OutputTuple = [
    sender: string,
    weekly: bigint,
    circulating_supply: bigint,
    circulating_emission: bigint
  ];
  export interface OutputObject {
    sender: string;
    weekly: bigint;
    circulating_supply: bigint;
    circulating_emission: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MinterUpgradeable extends BaseContract {
  connect(runner?: ContractRunner | null): MinterUpgradeable;
  waitForDeployment(): Promise<this>;

  interface: MinterUpgradeableInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  EMISSION: TypedContractMethod<[], [bigint], "view">;

  LOCK: TypedContractMethod<[], [bigint], "view">;

  MAX_TEAM_RATE: TypedContractMethod<[], [bigint], "view">;

  PRECISION: TypedContractMethod<[], [bigint], "view">;

  REBASEMAX: TypedContractMethod<[], [bigint], "view">;

  TAIL_EMISSION: TypedContractMethod<[], [bigint], "view">;

  WEEK: TypedContractMethod<[], [bigint], "view">;

  _echo: TypedContractMethod<[], [string], "view">;

  _initialize: TypedContractMethod<
    [claimants: AddressLike[], amounts: BigNumberish[], max: BigNumberish],
    [void],
    "nonpayable"
  >;

  _rewards_distributor: TypedContractMethod<[], [string], "view">;

  _ve: TypedContractMethod<[], [string], "view">;

  _voter: TypedContractMethod<[], [string], "view">;

  acceptTeam: TypedContractMethod<[], [void], "nonpayable">;

  active_period: TypedContractMethod<[], [bigint], "view">;

  calculate_emission: TypedContractMethod<[], [bigint], "view">;

  calculate_rebate: TypedContractMethod<
    [_weeklyMint: BigNumberish],
    [bigint],
    "view"
  >;

  check: TypedContractMethod<[], [boolean], "view">;

  circulating_emission: TypedContractMethod<[], [bigint], "view">;

  circulating_supply: TypedContractMethod<[], [bigint], "view">;

  initialize: TypedContractMethod<
    [
      __voter: AddressLike,
      __ve: AddressLike,
      __rewards_distributor: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  isFirstMint: TypedContractMethod<[], [boolean], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  pendingTeam: TypedContractMethod<[], [string], "view">;

  period: TypedContractMethod<[], [bigint], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setEmission: TypedContractMethod<
    [_emission: BigNumberish],
    [void],
    "nonpayable"
  >;

  setRebase: TypedContractMethod<[_rebase: BigNumberish], [void], "nonpayable">;

  setRewardDistributor: TypedContractMethod<
    [_rewardDistro: AddressLike],
    [void],
    "nonpayable"
  >;

  setTeam: TypedContractMethod<[_team: AddressLike], [void], "nonpayable">;

  setTeamRate: TypedContractMethod<
    [_teamRate: BigNumberish],
    [void],
    "nonpayable"
  >;

  setVoter: TypedContractMethod<[__voter: AddressLike], [void], "nonpayable">;

  team: TypedContractMethod<[], [string], "view">;

  teamRate: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  update_period: TypedContractMethod<[], [bigint], "nonpayable">;

  weekly: TypedContractMethod<[], [bigint], "view">;

  weekly_emission: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "EMISSION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "LOCK"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_TEAM_RATE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "PRECISION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "REBASEMAX"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "TAIL_EMISSION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "WEEK"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "_echo"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "_initialize"
  ): TypedContractMethod<
    [claimants: AddressLike[], amounts: BigNumberish[], max: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "_rewards_distributor"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "_ve"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "_voter"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "acceptTeam"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "active_period"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "calculate_emission"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "calculate_rebate"
  ): TypedContractMethod<[_weeklyMint: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "check"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "circulating_emission"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "circulating_supply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      __voter: AddressLike,
      __ve: AddressLike,
      __rewards_distributor: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isFirstMint"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pendingTeam"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "period"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setEmission"
  ): TypedContractMethod<[_emission: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setRebase"
  ): TypedContractMethod<[_rebase: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setRewardDistributor"
  ): TypedContractMethod<[_rewardDistro: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTeam"
  ): TypedContractMethod<[_team: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTeamRate"
  ): TypedContractMethod<[_teamRate: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setVoter"
  ): TypedContractMethod<[__voter: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "team"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "teamRate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "update_period"
  ): TypedContractMethod<[], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "weekly"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "weekly_emission"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "Mint"
  ): TypedContractEvent<
    MintEvent.InputTuple,
    MintEvent.OutputTuple,
    MintEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "Mint(address,uint256,uint256,uint256)": TypedContractEvent<
      MintEvent.InputTuple,
      MintEvent.OutputTuple,
      MintEvent.OutputObject
    >;
    Mint: TypedContractEvent<
      MintEvent.InputTuple,
      MintEvent.OutputTuple,
      MintEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
