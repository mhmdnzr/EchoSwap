/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface PairFeesInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "claimFeesFor"
      | "processStakingFees"
      | "toStake0"
      | "toStake1"
      | "withdrawStakingFees"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "claimFeesFor",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "processStakingFees",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(functionFragment: "toStake0", values?: undefined): string;
  encodeFunctionData(functionFragment: "toStake1", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawStakingFees",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "claimFeesFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processStakingFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "toStake0", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "toStake1", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawStakingFees",
    data: BytesLike
  ): Result;
}

export interface PairFees extends BaseContract {
  connect(runner?: ContractRunner | null): PairFees;
  waitForDeployment(): Promise<this>;

  interface: PairFeesInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  claimFeesFor: TypedContractMethod<
    [recipient: AddressLike, amount0: BigNumberish, amount1: BigNumberish],
    [void],
    "nonpayable"
  >;

  processStakingFees: TypedContractMethod<
    [amount: BigNumberish, isTokenZero: boolean],
    [void],
    "nonpayable"
  >;

  toStake0: TypedContractMethod<[], [bigint], "view">;

  toStake1: TypedContractMethod<[], [bigint], "view">;

  withdrawStakingFees: TypedContractMethod<
    [recipient: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "claimFeesFor"
  ): TypedContractMethod<
    [recipient: AddressLike, amount0: BigNumberish, amount1: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "processStakingFees"
  ): TypedContractMethod<
    [amount: BigNumberish, isTokenZero: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "toStake0"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "toStake1"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "withdrawStakingFees"
  ): TypedContractMethod<[recipient: AddressLike], [void], "nonpayable">;

  filters: {};
}
