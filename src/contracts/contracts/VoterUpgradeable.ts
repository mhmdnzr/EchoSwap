/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface VoterUpgradeableInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "_initialize"
      | "_ve"
      | "attachTokenToGauge"
      | "bribefactory"
      | "claimBribes"
      | "claimFees"
      | "claimRewards"
      | "claimable"
      | "createGauge"
      | "detachTokenFromGauge"
      | "distribute(address[])"
      | "distribute(address)"
      | "distribute(uint256,uint256)"
      | "distributeAll"
      | "distributeFees"
      | "emergencyCouncil"
      | "emitDeposit"
      | "emitWithdraw"
      | "external_bribes"
      | "factory"
      | "gaugefactory"
      | "gauges"
      | "governor"
      | "initialize"
      | "internal_bribes"
      | "isAlive"
      | "isGauge"
      | "isWhitelisted"
      | "killGauge"
      | "lastVoted"
      | "length"
      | "minter"
      | "notifyRewardAmount"
      | "owner"
      | "poke"
      | "poolForGauge"
      | "poolVote"
      | "poolVoteLength"
      | "pools"
      | "renounceOwnership"
      | "reset"
      | "reviveGauge"
      | "setEmergencyCouncil"
      | "setGovernor"
      | "totalWeight"
      | "transferOwnership"
      | "updateAll"
      | "updateFor"
      | "updateForRange"
      | "updateGauge"
      | "usedWeights"
      | "vote"
      | "votes"
      | "weights"
      | "whitelist"
      | "wrapped_bribe_factory"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Abstained"
      | "Attach"
      | "Deposit"
      | "Detach"
      | "DistributeReward"
      | "GaugeCreated"
      | "GaugeKilled"
      | "GaugeRevived"
      | "Initialized"
      | "NotifyReward"
      | "OwnershipTransferred"
      | "Voted"
      | "Whitelisted"
      | "Withdraw"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "_initialize",
    values: [AddressLike[], AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "_ve", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "attachTokenToGauge",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "bribefactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimBribes",
    values: [AddressLike[], AddressLike[][], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimFees",
    values: [AddressLike[], AddressLike[][], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimRewards",
    values: [AddressLike[], AddressLike[][]]
  ): string;
  encodeFunctionData(
    functionFragment: "claimable",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createGauge",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "detachTokenFromGauge",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "distribute(address[])",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "distribute(address)",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "distribute(uint256,uint256)",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "distributeAll",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "distributeFees",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyCouncil",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emitDeposit",
    values: [BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emitWithdraw",
    values: [BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "external_bribes",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "gaugefactory",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "gauges", values: [AddressLike]): string;
  encodeFunctionData(functionFragment: "governor", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, AddressLike, AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "internal_bribes",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isAlive",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isGauge",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isWhitelisted",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "killGauge",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lastVoted",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "length", values?: undefined): string;
  encodeFunctionData(functionFragment: "minter", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "notifyRewardAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "poke", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "poolForGauge",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "poolVote",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "poolVoteLength",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "pools", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "reset", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "reviveGauge",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setEmergencyCouncil",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setGovernor",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalWeight",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "updateAll", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateFor",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "updateForRange",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateGauge",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "usedWeights",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "vote",
    values: [BigNumberish, AddressLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "votes",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "weights",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelist",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "wrapped_bribe_factory",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "_initialize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_ve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "attachTokenToGauge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bribefactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimBribes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimFees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimable", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createGauge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "detachTokenFromGauge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distribute(address[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distribute(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distribute(uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributeAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributeFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyCouncil",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emitDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emitWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "external_bribes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "gaugefactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gauges", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "governor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "internal_bribes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isAlive", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isGauge", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isWhitelisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "killGauge", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lastVoted", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "length", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "minter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "notifyRewardAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "poke", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "poolForGauge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "poolVote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "poolVoteLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pools", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reset", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "reviveGauge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEmergencyCouncil",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updateAll", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "updateFor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateForRange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateGauge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "usedWeights",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "votes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "weights", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "whitelist", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "wrapped_bribe_factory",
    data: BytesLike
  ): Result;
}

export namespace AbstainedEvent {
  export type InputTuple = [tokenId: BigNumberish, weight: BigNumberish];
  export type OutputTuple = [tokenId: bigint, weight: bigint];
  export interface OutputObject {
    tokenId: bigint;
    weight: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AttachEvent {
  export type InputTuple = [
    owner: AddressLike,
    gauge: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [owner: string, gauge: string, tokenId: bigint];
  export interface OutputObject {
    owner: string;
    gauge: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositEvent {
  export type InputTuple = [
    lp: AddressLike,
    gauge: AddressLike,
    tokenId: BigNumberish,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    lp: string,
    gauge: string,
    tokenId: bigint,
    amount: bigint
  ];
  export interface OutputObject {
    lp: string;
    gauge: string;
    tokenId: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DetachEvent {
  export type InputTuple = [
    owner: AddressLike,
    gauge: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [owner: string, gauge: string, tokenId: bigint];
  export interface OutputObject {
    owner: string;
    gauge: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DistributeRewardEvent {
  export type InputTuple = [
    sender: AddressLike,
    gauge: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [sender: string, gauge: string, amount: bigint];
  export interface OutputObject {
    sender: string;
    gauge: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GaugeCreatedEvent {
  export type InputTuple = [
    gauge: AddressLike,
    creator: AddressLike,
    internal_bribe: AddressLike,
    external_bribe: AddressLike,
    pool: AddressLike
  ];
  export type OutputTuple = [
    gauge: string,
    creator: string,
    internal_bribe: string,
    external_bribe: string,
    pool: string
  ];
  export interface OutputObject {
    gauge: string;
    creator: string;
    internal_bribe: string;
    external_bribe: string;
    pool: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GaugeKilledEvent {
  export type InputTuple = [gauge: AddressLike];
  export type OutputTuple = [gauge: string];
  export interface OutputObject {
    gauge: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GaugeRevivedEvent {
  export type InputTuple = [gauge: AddressLike];
  export type OutputTuple = [gauge: string];
  export interface OutputObject {
    gauge: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NotifyRewardEvent {
  export type InputTuple = [
    sender: AddressLike,
    reward: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [sender: string, reward: string, amount: bigint];
  export interface OutputObject {
    sender: string;
    reward: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VotedEvent {
  export type InputTuple = [
    voter: AddressLike,
    tokenId: BigNumberish,
    weight: BigNumberish
  ];
  export type OutputTuple = [voter: string, tokenId: bigint, weight: bigint];
  export interface OutputObject {
    voter: string;
    tokenId: bigint;
    weight: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WhitelistedEvent {
  export type InputTuple = [whitelister: AddressLike, token: AddressLike];
  export type OutputTuple = [whitelister: string, token: string];
  export interface OutputObject {
    whitelister: string;
    token: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawEvent {
  export type InputTuple = [
    lp: AddressLike,
    gauge: AddressLike,
    tokenId: BigNumberish,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    lp: string,
    gauge: string,
    tokenId: bigint,
    amount: bigint
  ];
  export interface OutputObject {
    lp: string;
    gauge: string;
    tokenId: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface VoterUpgradeable extends BaseContract {
  connect(runner?: ContractRunner | null): VoterUpgradeable;
  waitForDeployment(): Promise<this>;

  interface: VoterUpgradeableInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  _initialize: TypedContractMethod<
    [_tokens: AddressLike[], _minter: AddressLike],
    [void],
    "nonpayable"
  >;

  _ve: TypedContractMethod<[], [string], "view">;

  attachTokenToGauge: TypedContractMethod<
    [tokenId: BigNumberish, account: AddressLike],
    [void],
    "nonpayable"
  >;

  bribefactory: TypedContractMethod<[], [string], "view">;

  claimBribes: TypedContractMethod<
    [_bribes: AddressLike[], _tokens: AddressLike[][], _tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  claimFees: TypedContractMethod<
    [_fees: AddressLike[], _tokens: AddressLike[][], _tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  claimRewards: TypedContractMethod<
    [_gauges: AddressLike[], _tokens: AddressLike[][]],
    [void],
    "nonpayable"
  >;

  claimable: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  createGauge: TypedContractMethod<
    [_pool: AddressLike],
    [string],
    "nonpayable"
  >;

  detachTokenFromGauge: TypedContractMethod<
    [tokenId: BigNumberish, account: AddressLike],
    [void],
    "nonpayable"
  >;

  "distribute(address[])": TypedContractMethod<
    [_gauges: AddressLike[]],
    [void],
    "nonpayable"
  >;

  "distribute(address)": TypedContractMethod<
    [_gauge: AddressLike],
    [void],
    "nonpayable"
  >;

  "distribute(uint256,uint256)": TypedContractMethod<
    [start: BigNumberish, finish: BigNumberish],
    [void],
    "nonpayable"
  >;

  distributeAll: TypedContractMethod<[], [void], "nonpayable">;

  distributeFees: TypedContractMethod<
    [_gauges: AddressLike[]],
    [void],
    "nonpayable"
  >;

  emergencyCouncil: TypedContractMethod<[], [string], "view">;

  emitDeposit: TypedContractMethod<
    [tokenId: BigNumberish, account: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  emitWithdraw: TypedContractMethod<
    [tokenId: BigNumberish, account: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  external_bribes: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  factory: TypedContractMethod<[], [string], "view">;

  gaugefactory: TypedContractMethod<[], [string], "view">;

  gauges: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  governor: TypedContractMethod<[], [string], "view">;

  initialize: TypedContractMethod<
    [
      __ve: AddressLike,
      _factory: AddressLike,
      _gauges: AddressLike,
      _bribes: AddressLike,
      w_bribe: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  internal_bribes: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  isAlive: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  isGauge: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  isWhitelisted: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  killGauge: TypedContractMethod<[_gauge: AddressLike], [void], "nonpayable">;

  lastVoted: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  length: TypedContractMethod<[], [bigint], "view">;

  minter: TypedContractMethod<[], [string], "view">;

  notifyRewardAmount: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  poke: TypedContractMethod<[_tokenId: BigNumberish], [void], "nonpayable">;

  poolForGauge: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  poolVote: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [string],
    "view"
  >;

  poolVoteLength: TypedContractMethod<
    [tokenId: BigNumberish],
    [bigint],
    "view"
  >;

  pools: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  reset: TypedContractMethod<[_tokenId: BigNumberish], [void], "nonpayable">;

  reviveGauge: TypedContractMethod<[_gauge: AddressLike], [void], "nonpayable">;

  setEmergencyCouncil: TypedContractMethod<
    [_council: AddressLike],
    [void],
    "nonpayable"
  >;

  setGovernor: TypedContractMethod<
    [_governor: AddressLike],
    [void],
    "nonpayable"
  >;

  totalWeight: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateAll: TypedContractMethod<[], [void], "nonpayable">;

  updateFor: TypedContractMethod<
    [_gauges: AddressLike[]],
    [void],
    "nonpayable"
  >;

  updateForRange: TypedContractMethod<
    [start: BigNumberish, end: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateGauge: TypedContractMethod<[_gauge: AddressLike], [void], "nonpayable">;

  usedWeights: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  vote: TypedContractMethod<
    [tokenId: BigNumberish, _poolVote: AddressLike[], _weights: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  votes: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [bigint],
    "view"
  >;

  weights: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  whitelist: TypedContractMethod<[_token: AddressLike], [void], "nonpayable">;

  wrapped_bribe_factory: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "_initialize"
  ): TypedContractMethod<
    [_tokens: AddressLike[], _minter: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "_ve"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "attachTokenToGauge"
  ): TypedContractMethod<
    [tokenId: BigNumberish, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "bribefactory"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "claimBribes"
  ): TypedContractMethod<
    [_bribes: AddressLike[], _tokens: AddressLike[][], _tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claimFees"
  ): TypedContractMethod<
    [_fees: AddressLike[], _tokens: AddressLike[][], _tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claimRewards"
  ): TypedContractMethod<
    [_gauges: AddressLike[], _tokens: AddressLike[][]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claimable"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "createGauge"
  ): TypedContractMethod<[_pool: AddressLike], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "detachTokenFromGauge"
  ): TypedContractMethod<
    [tokenId: BigNumberish, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "distribute(address[])"
  ): TypedContractMethod<[_gauges: AddressLike[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "distribute(address)"
  ): TypedContractMethod<[_gauge: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "distribute(uint256,uint256)"
  ): TypedContractMethod<
    [start: BigNumberish, finish: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "distributeAll"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "distributeFees"
  ): TypedContractMethod<[_gauges: AddressLike[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "emergencyCouncil"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "emitDeposit"
  ): TypedContractMethod<
    [tokenId: BigNumberish, account: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "emitWithdraw"
  ): TypedContractMethod<
    [tokenId: BigNumberish, account: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "external_bribes"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "factory"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "gaugefactory"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "gauges"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "governor"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      __ve: AddressLike,
      _factory: AddressLike,
      _gauges: AddressLike,
      _bribes: AddressLike,
      w_bribe: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "internal_bribes"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "isAlive"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isGauge"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isWhitelisted"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "killGauge"
  ): TypedContractMethod<[_gauge: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "lastVoted"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "length"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "minter"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "notifyRewardAmount"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "poke"
  ): TypedContractMethod<[_tokenId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "poolForGauge"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "poolVote"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "poolVoteLength"
  ): TypedContractMethod<[tokenId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "pools"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "reset"
  ): TypedContractMethod<[_tokenId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "reviveGauge"
  ): TypedContractMethod<[_gauge: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setEmergencyCouncil"
  ): TypedContractMethod<[_council: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setGovernor"
  ): TypedContractMethod<[_governor: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "totalWeight"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateAll"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateFor"
  ): TypedContractMethod<[_gauges: AddressLike[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateForRange"
  ): TypedContractMethod<
    [start: BigNumberish, end: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateGauge"
  ): TypedContractMethod<[_gauge: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "usedWeights"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "vote"
  ): TypedContractMethod<
    [tokenId: BigNumberish, _poolVote: AddressLike[], _weights: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "votes"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "weights"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "whitelist"
  ): TypedContractMethod<[_token: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "wrapped_bribe_factory"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "Abstained"
  ): TypedContractEvent<
    AbstainedEvent.InputTuple,
    AbstainedEvent.OutputTuple,
    AbstainedEvent.OutputObject
  >;
  getEvent(
    key: "Attach"
  ): TypedContractEvent<
    AttachEvent.InputTuple,
    AttachEvent.OutputTuple,
    AttachEvent.OutputObject
  >;
  getEvent(
    key: "Deposit"
  ): TypedContractEvent<
    DepositEvent.InputTuple,
    DepositEvent.OutputTuple,
    DepositEvent.OutputObject
  >;
  getEvent(
    key: "Detach"
  ): TypedContractEvent<
    DetachEvent.InputTuple,
    DetachEvent.OutputTuple,
    DetachEvent.OutputObject
  >;
  getEvent(
    key: "DistributeReward"
  ): TypedContractEvent<
    DistributeRewardEvent.InputTuple,
    DistributeRewardEvent.OutputTuple,
    DistributeRewardEvent.OutputObject
  >;
  getEvent(
    key: "GaugeCreated"
  ): TypedContractEvent<
    GaugeCreatedEvent.InputTuple,
    GaugeCreatedEvent.OutputTuple,
    GaugeCreatedEvent.OutputObject
  >;
  getEvent(
    key: "GaugeKilled"
  ): TypedContractEvent<
    GaugeKilledEvent.InputTuple,
    GaugeKilledEvent.OutputTuple,
    GaugeKilledEvent.OutputObject
  >;
  getEvent(
    key: "GaugeRevived"
  ): TypedContractEvent<
    GaugeRevivedEvent.InputTuple,
    GaugeRevivedEvent.OutputTuple,
    GaugeRevivedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "NotifyReward"
  ): TypedContractEvent<
    NotifyRewardEvent.InputTuple,
    NotifyRewardEvent.OutputTuple,
    NotifyRewardEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Voted"
  ): TypedContractEvent<
    VotedEvent.InputTuple,
    VotedEvent.OutputTuple,
    VotedEvent.OutputObject
  >;
  getEvent(
    key: "Whitelisted"
  ): TypedContractEvent<
    WhitelistedEvent.InputTuple,
    WhitelistedEvent.OutputTuple,
    WhitelistedEvent.OutputObject
  >;
  getEvent(
    key: "Withdraw"
  ): TypedContractEvent<
    WithdrawEvent.InputTuple,
    WithdrawEvent.OutputTuple,
    WithdrawEvent.OutputObject
  >;

  filters: {
    "Abstained(uint256,uint256)": TypedContractEvent<
      AbstainedEvent.InputTuple,
      AbstainedEvent.OutputTuple,
      AbstainedEvent.OutputObject
    >;
    Abstained: TypedContractEvent<
      AbstainedEvent.InputTuple,
      AbstainedEvent.OutputTuple,
      AbstainedEvent.OutputObject
    >;

    "Attach(address,address,uint256)": TypedContractEvent<
      AttachEvent.InputTuple,
      AttachEvent.OutputTuple,
      AttachEvent.OutputObject
    >;
    Attach: TypedContractEvent<
      AttachEvent.InputTuple,
      AttachEvent.OutputTuple,
      AttachEvent.OutputObject
    >;

    "Deposit(address,address,uint256,uint256)": TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;
    Deposit: TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;

    "Detach(address,address,uint256)": TypedContractEvent<
      DetachEvent.InputTuple,
      DetachEvent.OutputTuple,
      DetachEvent.OutputObject
    >;
    Detach: TypedContractEvent<
      DetachEvent.InputTuple,
      DetachEvent.OutputTuple,
      DetachEvent.OutputObject
    >;

    "DistributeReward(address,address,uint256)": TypedContractEvent<
      DistributeRewardEvent.InputTuple,
      DistributeRewardEvent.OutputTuple,
      DistributeRewardEvent.OutputObject
    >;
    DistributeReward: TypedContractEvent<
      DistributeRewardEvent.InputTuple,
      DistributeRewardEvent.OutputTuple,
      DistributeRewardEvent.OutputObject
    >;

    "GaugeCreated(address,address,address,address,address)": TypedContractEvent<
      GaugeCreatedEvent.InputTuple,
      GaugeCreatedEvent.OutputTuple,
      GaugeCreatedEvent.OutputObject
    >;
    GaugeCreated: TypedContractEvent<
      GaugeCreatedEvent.InputTuple,
      GaugeCreatedEvent.OutputTuple,
      GaugeCreatedEvent.OutputObject
    >;

    "GaugeKilled(address)": TypedContractEvent<
      GaugeKilledEvent.InputTuple,
      GaugeKilledEvent.OutputTuple,
      GaugeKilledEvent.OutputObject
    >;
    GaugeKilled: TypedContractEvent<
      GaugeKilledEvent.InputTuple,
      GaugeKilledEvent.OutputTuple,
      GaugeKilledEvent.OutputObject
    >;

    "GaugeRevived(address)": TypedContractEvent<
      GaugeRevivedEvent.InputTuple,
      GaugeRevivedEvent.OutputTuple,
      GaugeRevivedEvent.OutputObject
    >;
    GaugeRevived: TypedContractEvent<
      GaugeRevivedEvent.InputTuple,
      GaugeRevivedEvent.OutputTuple,
      GaugeRevivedEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "NotifyReward(address,address,uint256)": TypedContractEvent<
      NotifyRewardEvent.InputTuple,
      NotifyRewardEvent.OutputTuple,
      NotifyRewardEvent.OutputObject
    >;
    NotifyReward: TypedContractEvent<
      NotifyRewardEvent.InputTuple,
      NotifyRewardEvent.OutputTuple,
      NotifyRewardEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Voted(address,uint256,uint256)": TypedContractEvent<
      VotedEvent.InputTuple,
      VotedEvent.OutputTuple,
      VotedEvent.OutputObject
    >;
    Voted: TypedContractEvent<
      VotedEvent.InputTuple,
      VotedEvent.OutputTuple,
      VotedEvent.OutputObject
    >;

    "Whitelisted(address,address)": TypedContractEvent<
      WhitelistedEvent.InputTuple,
      WhitelistedEvent.OutputTuple,
      WhitelistedEvent.OutputObject
    >;
    Whitelisted: TypedContractEvent<
      WhitelistedEvent.InputTuple,
      WhitelistedEvent.OutputTuple,
      WhitelistedEvent.OutputObject
    >;

    "Withdraw(address,address,uint256,uint256)": TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
    Withdraw: TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
  };
}
