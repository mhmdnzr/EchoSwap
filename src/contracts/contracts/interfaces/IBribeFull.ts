/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface IBribeFullInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "_deposit"
      | "_withdraw"
      | "earned(address,uint256)"
      | "earned(uint256,address)"
      | "firstBribeTimestamp"
      | "getEpochStart"
      | "getPriorSupplyIndex"
      | "getRewardForOwner"
      | "left"
      | "notifyRewardAmount"
      | "rewardTokens"
      | "rewardsListLength"
      | "rewardsPerEpoch"
      | "supplyCheckpoints"
      | "supplyNumCheckpoints"
      | "totalSupplyAt"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "_deposit",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_withdraw",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "earned(address,uint256)",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "earned(uint256,address)",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "firstBribeTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEpochStart",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPriorSupplyIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardForOwner",
    values: [BigNumberish, AddressLike[]]
  ): string;
  encodeFunctionData(functionFragment: "left", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "notifyRewardAmount",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardsListLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardsPerEpoch",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supplyCheckpoints",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supplyNumCheckpoints",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupplyAt",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "_deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "earned(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "earned(uint256,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "firstBribeTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEpochStart",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPriorSupplyIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardForOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "left", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "notifyRewardAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardsListLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardsPerEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supplyCheckpoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supplyNumCheckpoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupplyAt",
    data: BytesLike
  ): Result;
}

export interface IBribeFull extends BaseContract {
  connect(runner?: ContractRunner | null): IBribeFull;
  waitForDeployment(): Promise<this>;

  interface: IBribeFullInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  _deposit: TypedContractMethod<
    [amount: BigNumberish, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  _withdraw: TypedContractMethod<
    [amount: BigNumberish, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  "earned(address,uint256)": TypedContractMethod<
    [token: AddressLike, tokenId: BigNumberish],
    [bigint],
    "view"
  >;

  "earned(uint256,address)": TypedContractMethod<
    [tokenId: BigNumberish, token: AddressLike],
    [bigint],
    "view"
  >;

  firstBribeTimestamp: TypedContractMethod<[], [bigint], "view">;

  getEpochStart: TypedContractMethod<
    [timestamp: BigNumberish],
    [bigint],
    "view"
  >;

  getPriorSupplyIndex: TypedContractMethod<
    [timestamp: BigNumberish],
    [bigint],
    "view"
  >;

  getRewardForOwner: TypedContractMethod<
    [tokenId: BigNumberish, tokens: AddressLike[]],
    [void],
    "nonpayable"
  >;

  left: TypedContractMethod<[token: AddressLike], [bigint], "view">;

  notifyRewardAmount: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  rewardTokens: TypedContractMethod<[index: BigNumberish], [string], "view">;

  rewardsListLength: TypedContractMethod<[], [bigint], "view">;

  rewardsPerEpoch: TypedContractMethod<
    [token: AddressLike, ts: BigNumberish],
    [bigint],
    "view"
  >;

  supplyCheckpoints: TypedContractMethod<
    [_index: BigNumberish],
    [[bigint, bigint] & { timestamp: bigint; supplyd: bigint }],
    "view"
  >;

  supplyNumCheckpoints: TypedContractMethod<[], [bigint], "view">;

  totalSupplyAt: TypedContractMethod<
    [_timestamp: BigNumberish],
    [bigint],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "_deposit"
  ): TypedContractMethod<
    [amount: BigNumberish, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "_withdraw"
  ): TypedContractMethod<
    [amount: BigNumberish, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "earned(address,uint256)"
  ): TypedContractMethod<
    [token: AddressLike, tokenId: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "earned(uint256,address)"
  ): TypedContractMethod<
    [tokenId: BigNumberish, token: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "firstBribeTimestamp"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getEpochStart"
  ): TypedContractMethod<[timestamp: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPriorSupplyIndex"
  ): TypedContractMethod<[timestamp: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRewardForOwner"
  ): TypedContractMethod<
    [tokenId: BigNumberish, tokens: AddressLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "left"
  ): TypedContractMethod<[token: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "notifyRewardAmount"
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "rewardTokens"
  ): TypedContractMethod<[index: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "rewardsListLength"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "rewardsPerEpoch"
  ): TypedContractMethod<
    [token: AddressLike, ts: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "supplyCheckpoints"
  ): TypedContractMethod<
    [_index: BigNumberish],
    [[bigint, bigint] & { timestamp: bigint; supplyd: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "supplyNumCheckpoints"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalSupplyAt"
  ): TypedContractMethod<[_timestamp: BigNumberish], [bigint], "view">;

  filters: {};
}
