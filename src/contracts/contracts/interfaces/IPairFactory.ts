/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface IPairFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "allPairs"
      | "allPairsLength"
      | "createPair"
      | "getPair"
      | "isPair"
      | "pairCodeHash"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "allPairs",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allPairsLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createPair",
    values: [AddressLike, AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getPair",
    values: [AddressLike, AddressLike, boolean]
  ): string;
  encodeFunctionData(functionFragment: "isPair", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "pairCodeHash",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "allPairs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allPairsLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createPair", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getPair", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isPair", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pairCodeHash",
    data: BytesLike
  ): Result;
}

export interface IPairFactory extends BaseContract {
  connect(runner?: ContractRunner | null): IPairFactory;
  waitForDeployment(): Promise<this>;

  interface: IPairFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  allPairs: TypedContractMethod<[index: BigNumberish], [string], "view">;

  allPairsLength: TypedContractMethod<[], [bigint], "view">;

  createPair: TypedContractMethod<
    [tokenA: AddressLike, tokenB: AddressLike, stable: boolean],
    [string],
    "nonpayable"
  >;

  getPair: TypedContractMethod<
    [tokenA: AddressLike, token: AddressLike, stable: boolean],
    [string],
    "view"
  >;

  isPair: TypedContractMethod<[pair: AddressLike], [boolean], "view">;

  pairCodeHash: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "allPairs"
  ): TypedContractMethod<[index: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "allPairsLength"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "createPair"
  ): TypedContractMethod<
    [tokenA: AddressLike, tokenB: AddressLike, stable: boolean],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getPair"
  ): TypedContractMethod<
    [tokenA: AddressLike, token: AddressLike, stable: boolean],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "isPair"
  ): TypedContractMethod<[pair: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "pairCodeHash"
  ): TypedContractMethod<[], [string], "view">;

  filters: {};
}
