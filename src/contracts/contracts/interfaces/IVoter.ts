/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface IVoterInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "_ve"
      | "attachTokenToGauge"
      | "detachTokenFromGauge"
      | "distribute"
      | "distributeAll"
      | "distributeFees"
      | "emergencyCouncil"
      | "emitDeposit"
      | "emitWithdraw"
      | "external_bribes"
      | "factory"
      | "gauges"
      | "governor"
      | "internal_bribes"
      | "isWhitelisted"
      | "lastVoted"
      | "minter"
      | "notifyRewardAmount"
      | "poolVote"
      | "poolVoteLength"
      | "usedWeights"
      | "votes"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "_ve", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "attachTokenToGauge",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "detachTokenFromGauge",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "distribute",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "distributeAll",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "distributeFees",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyCouncil",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emitDeposit",
    values: [BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emitWithdraw",
    values: [BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "external_bribes",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(functionFragment: "gauges", values: [AddressLike]): string;
  encodeFunctionData(functionFragment: "governor", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "internal_bribes",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isWhitelisted",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lastVoted",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "minter", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "notifyRewardAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "poolVote",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "poolVoteLength",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "usedWeights",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "votes",
    values: [BigNumberish, AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "_ve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "attachTokenToGauge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "detachTokenFromGauge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "distribute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "distributeAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributeFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyCouncil",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emitDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emitWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "external_bribes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gauges", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "governor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "internal_bribes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWhitelisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lastVoted", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "minter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "notifyRewardAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "poolVote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "poolVoteLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "usedWeights",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "votes", data: BytesLike): Result;
}

export interface IVoter extends BaseContract {
  connect(runner?: ContractRunner | null): IVoter;
  waitForDeployment(): Promise<this>;

  interface: IVoterInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  _ve: TypedContractMethod<[], [string], "view">;

  attachTokenToGauge: TypedContractMethod<
    [_tokenId: BigNumberish, account: AddressLike],
    [void],
    "nonpayable"
  >;

  detachTokenFromGauge: TypedContractMethod<
    [_tokenId: BigNumberish, account: AddressLike],
    [void],
    "nonpayable"
  >;

  distribute: TypedContractMethod<[_gauge: AddressLike], [void], "nonpayable">;

  distributeAll: TypedContractMethod<[], [void], "nonpayable">;

  distributeFees: TypedContractMethod<
    [_gauges: AddressLike[]],
    [void],
    "nonpayable"
  >;

  emergencyCouncil: TypedContractMethod<[], [string], "view">;

  emitDeposit: TypedContractMethod<
    [_tokenId: BigNumberish, account: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  emitWithdraw: TypedContractMethod<
    [_tokenId: BigNumberish, account: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  external_bribes: TypedContractMethod<[_gauge: AddressLike], [string], "view">;

  factory: TypedContractMethod<[], [string], "view">;

  gauges: TypedContractMethod<[_pair: AddressLike], [string], "view">;

  governor: TypedContractMethod<[], [string], "view">;

  internal_bribes: TypedContractMethod<[_gauge: AddressLike], [string], "view">;

  isWhitelisted: TypedContractMethod<[token: AddressLike], [boolean], "view">;

  lastVoted: TypedContractMethod<[id: BigNumberish], [bigint], "view">;

  minter: TypedContractMethod<[], [string], "view">;

  notifyRewardAmount: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  poolVote: TypedContractMethod<
    [id: BigNumberish, _index: BigNumberish],
    [string],
    "view"
  >;

  poolVoteLength: TypedContractMethod<
    [tokenId: BigNumberish],
    [bigint],
    "view"
  >;

  usedWeights: TypedContractMethod<[id: BigNumberish], [bigint], "view">;

  votes: TypedContractMethod<
    [id: BigNumberish, _pool: AddressLike],
    [bigint],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "_ve"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "attachTokenToGauge"
  ): TypedContractMethod<
    [_tokenId: BigNumberish, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "detachTokenFromGauge"
  ): TypedContractMethod<
    [_tokenId: BigNumberish, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "distribute"
  ): TypedContractMethod<[_gauge: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "distributeAll"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "distributeFees"
  ): TypedContractMethod<[_gauges: AddressLike[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "emergencyCouncil"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "emitDeposit"
  ): TypedContractMethod<
    [_tokenId: BigNumberish, account: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "emitWithdraw"
  ): TypedContractMethod<
    [_tokenId: BigNumberish, account: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "external_bribes"
  ): TypedContractMethod<[_gauge: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "factory"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "gauges"
  ): TypedContractMethod<[_pair: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "governor"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "internal_bribes"
  ): TypedContractMethod<[_gauge: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "isWhitelisted"
  ): TypedContractMethod<[token: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "lastVoted"
  ): TypedContractMethod<[id: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "minter"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "notifyRewardAmount"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "poolVote"
  ): TypedContractMethod<
    [id: BigNumberish, _index: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "poolVoteLength"
  ): TypedContractMethod<[tokenId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "usedWeights"
  ): TypedContractMethod<[id: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "votes"
  ): TypedContractMethod<
    [id: BigNumberish, _pool: AddressLike],
    [bigint],
    "view"
  >;

  filters: {};
}
