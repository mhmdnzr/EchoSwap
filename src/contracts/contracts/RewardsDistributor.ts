/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface RewardsDistributorInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "checkpoint_token"
      | "checkpoint_total_supply"
      | "claim"
      | "claim_many"
      | "claimable"
      | "depositor"
      | "last_token_time"
      | "owner"
      | "setDepositor"
      | "setOwner"
      | "start_time"
      | "time_cursor"
      | "time_cursor_of"
      | "timestamp"
      | "token"
      | "token_last_balance"
      | "tokens_per_week"
      | "user_epoch_of"
      | "ve_for_at"
      | "ve_supply"
      | "voting_escrow"
      | "withdrawERC20"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "CheckpointToken" | "Claimed"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "checkpoint_token",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "checkpoint_total_supply",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "claim", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "claim_many",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "claimable",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "depositor", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "last_token_time",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setDepositor",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setOwner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "start_time",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "time_cursor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "time_cursor_of",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "timestamp", values?: undefined): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "token_last_balance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokens_per_week",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "user_epoch_of",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ve_for_at",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ve_supply",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "voting_escrow",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawERC20",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "checkpoint_token",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkpoint_total_supply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claim_many", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimable", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "depositor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "last_token_time",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDepositor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "start_time", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "time_cursor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "time_cursor_of",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "timestamp", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "token_last_balance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokens_per_week",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "user_epoch_of",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ve_for_at", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ve_supply", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "voting_escrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawERC20",
    data: BytesLike
  ): Result;
}

export namespace CheckpointTokenEvent {
  export type InputTuple = [time: BigNumberish, tokens: BigNumberish];
  export type OutputTuple = [time: bigint, tokens: bigint];
  export interface OutputObject {
    time: bigint;
    tokens: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClaimedEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    amount: BigNumberish,
    claim_epoch: BigNumberish,
    max_epoch: BigNumberish
  ];
  export type OutputTuple = [
    tokenId: bigint,
    amount: bigint,
    claim_epoch: bigint,
    max_epoch: bigint
  ];
  export interface OutputObject {
    tokenId: bigint;
    amount: bigint;
    claim_epoch: bigint;
    max_epoch: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface RewardsDistributor extends BaseContract {
  connect(runner?: ContractRunner | null): RewardsDistributor;
  waitForDeployment(): Promise<this>;

  interface: RewardsDistributorInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  checkpoint_token: TypedContractMethod<[], [void], "nonpayable">;

  checkpoint_total_supply: TypedContractMethod<[], [void], "nonpayable">;

  claim: TypedContractMethod<[_tokenId: BigNumberish], [bigint], "nonpayable">;

  claim_many: TypedContractMethod<
    [_tokenIds: BigNumberish[]],
    [boolean],
    "nonpayable"
  >;

  claimable: TypedContractMethod<[_tokenId: BigNumberish], [bigint], "view">;

  depositor: TypedContractMethod<[], [string], "view">;

  last_token_time: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  setDepositor: TypedContractMethod<
    [_depositor: AddressLike],
    [void],
    "nonpayable"
  >;

  setOwner: TypedContractMethod<[_owner: AddressLike], [void], "nonpayable">;

  start_time: TypedContractMethod<[], [bigint], "view">;

  time_cursor: TypedContractMethod<[], [bigint], "view">;

  time_cursor_of: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  timestamp: TypedContractMethod<[], [bigint], "view">;

  token: TypedContractMethod<[], [string], "view">;

  token_last_balance: TypedContractMethod<[], [bigint], "view">;

  tokens_per_week: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  user_epoch_of: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  ve_for_at: TypedContractMethod<
    [_tokenId: BigNumberish, _timestamp: BigNumberish],
    [bigint],
    "view"
  >;

  ve_supply: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  voting_escrow: TypedContractMethod<[], [string], "view">;

  withdrawERC20: TypedContractMethod<
    [_token: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "checkpoint_token"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "checkpoint_total_supply"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "claim"
  ): TypedContractMethod<[_tokenId: BigNumberish], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "claim_many"
  ): TypedContractMethod<[_tokenIds: BigNumberish[]], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "claimable"
  ): TypedContractMethod<[_tokenId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "depositor"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "last_token_time"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setDepositor"
  ): TypedContractMethod<[_depositor: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setOwner"
  ): TypedContractMethod<[_owner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "start_time"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "time_cursor"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "time_cursor_of"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "timestamp"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "token"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "token_last_balance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "tokens_per_week"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "user_epoch_of"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "ve_for_at"
  ): TypedContractMethod<
    [_tokenId: BigNumberish, _timestamp: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "ve_supply"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "voting_escrow"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "withdrawERC20"
  ): TypedContractMethod<[_token: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "CheckpointToken"
  ): TypedContractEvent<
    CheckpointTokenEvent.InputTuple,
    CheckpointTokenEvent.OutputTuple,
    CheckpointTokenEvent.OutputObject
  >;
  getEvent(
    key: "Claimed"
  ): TypedContractEvent<
    ClaimedEvent.InputTuple,
    ClaimedEvent.OutputTuple,
    ClaimedEvent.OutputObject
  >;

  filters: {
    "CheckpointToken(uint256,uint256)": TypedContractEvent<
      CheckpointTokenEvent.InputTuple,
      CheckpointTokenEvent.OutputTuple,
      CheckpointTokenEvent.OutputObject
    >;
    CheckpointToken: TypedContractEvent<
      CheckpointTokenEvent.InputTuple,
      CheckpointTokenEvent.OutputTuple,
      CheckpointTokenEvent.OutputObject
    >;

    "Claimed(uint256,uint256,uint256,uint256)": TypedContractEvent<
      ClaimedEvent.InputTuple,
      ClaimedEvent.OutputTuple,
      ClaimedEvent.OutputObject
    >;
    Claimed: TypedContractEvent<
      ClaimedEvent.InputTuple,
      ClaimedEvent.OutputTuple,
      ClaimedEvent.OutputObject
    >;
  };
}
